{"version":3,"sources":["../src/client/index.ts","../src/commands/index.ts","../src/v2/index.ts","../src/ux/index.ts","../src/rest/index.ts","../src/perms/index.ts","../src/shards/index.ts","../src/cache/index.ts","../src/i18n/index.ts","../src/errors/index.ts"],"names":["confirm","createDefaultLogger","ActionRowBuilder","MessageFlags","ComponentType","modal","options"],"mappings":";;;;;;AAMA,IAAM,eAAA,GAAuD;AAAA,EAC3D,UAAU,EAAC;AAAA,EACX,QAAA,EAAU,CAAC,iBAAA,CAAkB,cAAA,EAAgB,kBAAkB,aAAa,CAAA;AAAA,EAC5E,OAAA,EAAS,CAAC,iBAAA,CAAkB,YAAY,CAAA;AAAA,EACxC,SAAA,EAAW,CAAC,iBAAA,CAAkB,qBAAqB,CAAA;AAAA,EACnD,KAAA,EAAO,CAAC,iBAAA,CAAkB,gBAAgB,CAAA;AAAA,EAC1C,IAAI,EAAC;AAAA;AAAA,EACL,WAAA,EAAa,CAAC,iBAAA,CAAkB,MAAM;AAAA;AACxC,CAAA;AAwBO,SAAS,YAAA,CAAa,OAAA,GAA+B,EAAC,EAAW;AACtE,EAAA,MAAM;AAAA,IACJ,QAAA,GAAW,CAAC,UAAU,CAAA;AAAA,IACtB,oBAAoB,EAAC;AAAA,IACrB,WAAW,EAAC;AAAA,IACZ,YAAA,GAAe,IAAA;AAAA,IACf,SAAS,mBAAA;AAAoB,GAC/B,GAAI,OAAA;AAGJ,EAAA,MAAM,OAAA,uBAAc,GAAA,EAAuB;AAG3C,EAAA,OAAA,CAAQ,GAAA,CAAI,kBAAkB,MAAM,CAAA;AAGpC,EAAA,KAAA,MAAW,WAAW,QAAA,EAAU;AAC9B,IAAA,MAAM,cAAA,GAAiB,gBAAgB,OAAO,CAAA;AAC9C,IAAA,IAAI,cAAA,EAAgB;AAClB,MAAA,cAAA,CAAe,OAAA,CAAQ,CAAA,MAAA,KAAU,OAAA,CAAQ,GAAA,CAAI,MAAM,CAAC,CAAA;AAAA,IACtD,CAAA,MAAO;AACL,MAAA,MAAA,CAAO,IAAA,CAAK,CAAA,iBAAA,EAAoB,OAAO,CAAA,CAAE,CAAA;AAAA,IAC3C;AAAA,EACF;AAGA,EAAA,iBAAA,CAAkB,OAAA,CAAQ,CAAA,MAAA,KAAU,OAAA,CAAQ,GAAA,CAAI,MAAM,CAAC,CAAA;AAEvD,EAAA,MAAM,MAAA,GAAS,IAAI,MAAA,CAAO;AAAA,IACxB,OAAA,EAAS,KAAA,CAAM,IAAA,CAAK,OAAO,CAAA;AAAA,IAC3B;AAAA,GACD,CAAA;AAGD,EAAA,IAAI,YAAA,EAAc;AAChB,IAAA,oBAAA,CAAqB,QAAQ,MAAM,CAAA;AAAA,EACrC;AAGA,EAAC,OAAe,mBAAA,GAAsB,QAAA;AACtC,EAAC,OAAe,iBAAA,GAAoB,MAAA;AAEpC,EAAA,OAAO,MAAA;AACT;AAwBA,eAAsB,SAAS,MAAA,EAA+B;AAC5D,EAAA,MAAM,MAAA,GAAU,MAAA,CAAe,iBAAA,IAAqB,mBAAA,EAAoB;AACxE,EAAA,MAAM,QAAA,GAAY,MAAA,CAAe,mBAAA,IAAuB,EAAC;AAEzD,EAAA,MAAA,CAAO,KAAK,6CAAsC,CAAA;AAGlD,EAAA,IAAI,CAAC,MAAA,CAAO,OAAA,EAAQ,EAAG;AACrB,IAAA,MAAA,CAAO,KAAK,uEAA6D,CAAA;AAAA,EAC3E;AAGA,EAAA,IAAI,CAAC,OAAA,CAAQ,GAAA,CAAI,aAAA,IAAiB,CAAC,OAAO,KAAA,EAAO;AAC/C,IAAA,MAAA,CAAO,MAAM,wEAAmE,CAAA;AAAA,EAClF,CAAA,MAAO;AACL,IAAA,MAAA,CAAO,KAAK,iCAA4B,CAAA;AAAA,EAC1C;AAGA,EAAA,YAAA,CAAa,MAAA,EAAQ,UAAU,MAAM,CAAA;AAGrC,EAAA,IAAI,MAAA,CAAO,SAAQ,EAAG;AACpB,IAAA,MAAM,SAAA,GAAY,OAAO,EAAA,CAAG,IAAA;AAC5B,IAAA,IAAI,YAAY,GAAA,EAAK;AACnB,MAAA,MAAA,CAAO,IAAA,CAAK,CAAA,0BAAA,EAAwB,SAAS,CAAA,cAAA,CAAgB,CAAA;AAAA,IAC/D,CAAA,MAAA,IAAW,YAAY,GAAA,EAAK;AAC1B,MAAA,MAAA,CAAO,IAAA,CAAK,CAAA,iCAAA,EAA0B,SAAS,CAAA,SAAA,CAAW,CAAA;AAAA,IAC5D,CAAA,MAAO;AACL,MAAA,MAAA,CAAO,IAAA,CAAK,CAAA,iCAAA,EAA0B,SAAS,CAAA,4BAAA,CAA8B,CAAA;AAAA,IAC/E;AAEA,IAAA,MAAA,CAAO,KAAK,CAAA,iBAAA,EAAa,MAAA,CAAO,MAAA,CAAO,KAAA,CAAM,IAAI,CAAA,QAAA,CAAU,CAAA;AAAA,EAC7D;AAGA,EAAA,MAAM,cAAc,OAAA,CAAQ,OAAA;AAC5B,EAAA,MAAM,YAAA,GAAe,QAAA,CAAS,WAAA,CAAY,KAAA,CAAM,CAAC,EAAE,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAE,CAAA;AACjE,EAAA,IAAI,gBAAgB,EAAA,EAAI;AACtB,IAAA,MAAA,CAAO,IAAA,CAAK,CAAA,eAAA,EAAa,WAAW,CAAA,YAAA,CAAc,CAAA;AAAA,EACpD,CAAA,MAAO;AACL,IAAA,MAAA,CAAO,KAAA,CAAM,CAAA,eAAA,EAAa,WAAW,CAAA,+CAAA,CAAiD,CAAA;AAAA,EACxF;AAEA,EAAA,MAAA,CAAO,KAAK,iCAA0B,CAAA;AACxC;AAKA,SAAS,YAAA,CAAa,MAAA,EAAgB,QAAA,EAAoB,MAAA,EAAsB;AAC9E,EAAA,MAAM,eAAA,uBAAsB,GAAA,EAAuB;AAGnD,EAAA,KAAA,MAAW,WAAW,QAAA,EAAU;AAC9B,IAAA,MAAM,cAAA,GAAiB,gBAAgB,OAAO,CAAA;AAC9C,IAAA,IAAI,cAAA,EAAgB;AAClB,MAAA,cAAA,CAAe,OAAA,CAAQ,CAAA,MAAA,KAAU,eAAA,CAAgB,GAAA,CAAI,MAAM,CAAC,CAAA;AAAA,IAC9D;AAAA,EACF;AAEA,EAAA,MAAM,aAAA,GAAgB,OAAO,OAAA,CAAQ,OAAA;AACrC,EAAA,MAAM,iBAAA,GAAoB,KAAA,CAAM,OAAA,CAAQ,aAAa,CAAA,GACjD,aAAA,CAAc,QAAA,CAAS,iBAAA,CAAkB,cAAc,CAAA,GACvD,aAAA,EAAe,GAAA,CAAI,kBAAkB,cAAc,CAAA;AAGvD,EAAA,IAAI,QAAA,CAAS,QAAA,CAAS,UAAU,CAAA,EAAG;AACjC,IAAA,IAAI,iBAAA,EAAmB;AACrB,MAAA,MAAA,CAAO,KAAK,uCAAkC,CAAA;AAAA,IAChD,CAAA,MAAO;AACL,MAAA,MAAA,CAAO,MAAM,8EAAyE,CAAA;AACtF,MAAA,MAAA,CAAO,MAAM,0EAA0E,CAAA;AAAA,IACzF;AAAA,EACF;AAGA,EAAA,IAAI,QAAA,CAAS,QAAA,CAAS,SAAS,CAAA,EAAG;AAChC,IAAA,MAAM,UAAA,GAAa,KAAA,CAAM,OAAA,CAAQ,aAAa,CAAA,GAC1C,aAAA,CAAc,QAAA,CAAS,iBAAA,CAAkB,YAAY,CAAA,GACrD,aAAA,EAAe,GAAA,CAAI,kBAAkB,YAAY,CAAA;AACrD,IAAA,IAAI,UAAA,EAAY;AACd,MAAA,MAAA,CAAO,KAAK,qCAAgC,CAAA;AAAA,IAC9C,CAAA,MAAO;AACL,MAAA,MAAA,CAAO,MAAM,4EAAuE,CAAA;AACpF,MAAA,MAAA,CAAO,MAAM,6EAA6E,CAAA;AAAA,IAC5F;AAAA,EACF;AAEA,EAAA,MAAA,CAAO,KAAK,CAAA,4BAAA,EAAwB,QAAA,CAAS,IAAA,CAAK,IAAI,CAAC,CAAA,CAAE,CAAA;AAC3D;AAKA,SAAS,oBAAA,CAAqB,QAAgB,MAAA,EAAsB;AAElE,EAAA,MAAA,CAAO,EAAA,CAAG,mBAAA,EAAqB,OAAO,WAAA,KAAgB;AACpD,IAAA,IAAI,CAAC,WAAA,CAAY,WAAA,EAAY,EAAG;AAIhC,IAAA,MAAA,CAAO,MAAM,0CAA0C,CAAA;AAAA,EACzD,CAAC,CAAA;AAED,EAAA,MAAA,CAAO,EAAA,CAAG,OAAA,EAAS,CAAC,KAAA,KAAU;AAC5B,IAAA,MAAA,CAAO,KAAA,CAAM,yBAAyB,KAAK,CAAA;AAAA,EAC7C,CAAC,CAAA;AAED,EAAA,MAAA,CAAO,EAAA,CAAG,MAAA,EAAQ,CAAC,OAAA,KAAY;AAC7B,IAAA,MAAA,CAAO,IAAA,CAAK,2BAA2B,OAAO,CAAA;AAAA,EAChD,CAAC,CAAA;AACH;AAKA,SAAS,mBAAA,GAA8B;AACrC,EAAA,OAAO;AAAA,IACL,KAAA,EAAO,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,MAAM,CAAA,QAAA,EAAW,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA,IACvF,IAAA,EAAM,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,KAAK,CAAA,OAAA,EAAU,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA,IACpF,IAAA,EAAM,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,KAAK,CAAA,OAAA,EAAU,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA,IACpF,KAAA,EAAO,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,MAAM,CAAA,QAAA,EAAW,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI;AAAA,GACzF;AACF;ACnLO,SAAS,aAAa,UAAA,EAA+D;AAC1F,EAAA,IAAI,KAAA,CAAM,OAAA,CAAQ,UAAU,CAAA,EAAG;AAC7B,IAAA,OAAO,UAAA;AAAA,EACT;AAIA,EAAA,OAAA,CAAQ,KAAK,kEAAkE,CAAA;AAC/E,EAAA,OAAO,EAAC;AACV;AAiBA,eAAsB,iBAAA,CACpB,WACA,MAAA,EAC8B;AAC9B,EAAA,MAAM,WAAgC,EAAC;AAEvC,EAAA,IAAI;AACF,IAAA,MAAM,KAAA,GAAQ,MAAM,OAAA,CAAQ,SAAS,CAAA;AAErC,IAAA,KAAA,MAAW,QAAQ,KAAA,EAAO;AACxB,MAAA,MAAM,QAAA,GAAW,IAAA,CAAK,SAAA,EAAW,IAAI,CAAA;AACrC,MAAA,MAAM,KAAA,GAAQ,MAAM,IAAA,CAAK,QAAQ,CAAA;AAEjC,MAAA,IAAI,KAAA,CAAM,MAAA,EAAO,IAAK,CAAC,KAAA,EAAO,KAAA,EAAO,MAAM,CAAA,CAAE,QAAA,CAAS,OAAA,CAAQ,IAAI,CAAC,CAAA,EAAG;AACpE,QAAA,IAAI;AACF,UAAA,MAAA,EAAQ,KAAA,CAAM,CAAA,qBAAA,EAAwB,IAAI,CAAA,CAAE,CAAA;AAG5C,UAAA,MAAM,MAAA,GAAS,MAAM,OAAO,QAAA,CAAA;AAG5B,UAAA,MAAM,gBAAA,GAAmB;AAAA,YACvB,MAAA,CAAO,OAAA;AAAA,YACP,GAAG,MAAA,CAAO,MAAA,CAAO,MAAM,CAAA,CAAE,MAAA;AAAA,cAAO,CAAC,QAC/B,GAAA,IAAO,OAAO,QAAQ,QAAA,IAAY,GAAA,CAAI,QAAQ,GAAA,CAAI;AAAA;AACpD,WACF,CAAE,OAAO,OAAO,CAAA;AAEhB,UAAA,QAAA,CAAS,IAAA,CAAK,GAAG,gBAAuC,CAAA;AAAA,QAC1D,SAAS,KAAA,EAAO;AACd,UAAA,MAAA,EAAQ,KAAA,CAAM,CAAA,4BAAA,EAA+B,IAAI,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAAA,QAC7D;AAAA,MACF;AAAA,IACF;AAAA,EACF,SAAS,KAAA,EAAO;AACd,IAAA,MAAA,EAAQ,KAAA,CAAM,CAAA,kCAAA,EAAqC,SAAS,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA;AAAA,EACxE;AAEA,EAAA,OAAO,QAAA;AACT;AA8BA,eAAsB,MAAA,CACpB,MAAA,EACA,QAAA,EACA,OAAA,GAAyB,EAAC,EACX;AACf,EAAA,MAAM;AAAA,IACJ,KAAA,GAAQ,OAAA;AAAA,IACR,OAAA;AAAA,IACA,MAAA,GAAS,KAAA;AAAA,IACT,SAAAA,QAAAA,GAAU,KAAA;AAAA,IACV,SAASC,oBAAAA;AAAoB,GAC/B,GAAI,OAAA;AAEJ,EAAA,IAAI,CAAC,OAAO,KAAA,EAAO;AACjB,IAAA,MAAM,IAAI,MAAM,0DAA0D,CAAA;AAAA,EAC5E;AAEA,EAAA,IAAI,KAAA,KAAU,OAAA,IAAW,CAAC,OAAA,EAAS;AACjC,IAAA,MAAM,IAAI,MAAM,0DAA0D,CAAA;AAAA,EAC5E;AAEA,EAAA,MAAM,IAAA,GAAO,IAAI,IAAA,CAAK,EAAE,OAAA,EAAS,MAAM,CAAA,CAAE,QAAA,CAAS,MAAA,CAAO,KAAK,CAAA;AAC9D,EAAA,MAAM,QAAA,GAAW,MAAA,CAAO,IAAA,EAAM,EAAA,IAAM,OAAO,WAAA,EAAa,EAAA;AAExD,EAAA,IAAI,CAAC,QAAA,EAAU;AACb,IAAA,MAAM,IAAI,MAAM,+DAA+D,CAAA;AAAA,EACjF;AAGA,EAAA,MAAM,cAAc,QAAA,CAAS,GAAA,CAAI,SAAO,GAAA,CAAI,IAAA,CAAK,QAAQ,CAAA;AAEzD,EAAA,MAAA,CAAO,IAAA,CAAK,CAAA,oBAAA,EAAgB,WAAA,CAAY,MAAM,CAAA,eAAA,EAAkB,KAAK,CAAA,EAAG,KAAA,KAAU,OAAA,GAAU,CAAA,EAAA,EAAK,OAAO,CAAA,CAAA,CAAA,GAAM,EAAE,CAAA,CAAE,CAAA;AAElH,EAAA,IAAI;AAEF,IAAA,MAAM,KAAA,GAAQ,KAAA,KAAU,OAAA,GACpB,MAAA,CAAO,wBAAA,CAAyB,UAAU,OAAQ,CAAA,GAClD,MAAA,CAAO,mBAAA,CAAoB,QAAQ,CAAA;AAGvC,IAAA,MAAM,gBAAA,GAAmB,MAAM,IAAA,CAAK,GAAA,CAAI,KAAK,CAAA;AAG7C,IAAA,eAAA,CAAgB,gBAAA,EAAkB,aAAa,MAAM,CAAA;AAErD,IAAA,IAAI,MAAA,EAAQ;AACV,MAAA,MAAA,CAAO,KAAK,6CAAsC,CAAA;AAClD,MAAA;AAAA,IACF;AAEA,IAAA,IAAID,QAAAA,EAAS;AAEX,MAAA,MAAA,CAAO,KAAK,kEAAwD,CAAA;AAAA,IACtE;AAGA,IAAA,MAAM,gBAAA,GAAmB,MAAM,IAAA,CAAK,GAAA,CAAI,OAAO,EAAE,IAAA,EAAM,aAAa,CAAA;AAEpE,IAAA,MAAA,CAAO,IAAA,CAAK,CAAA,6BAAA,EAA2B,gBAAA,CAAiB,MAAM,CAAA,YAAA,CAAc,CAAA;AAE5E,IAAA,IAAI,UAAU,QAAA,EAAU;AACtB,MAAA,MAAA,CAAO,KAAK,8EAAyE,CAAA;AAAA,IACvF;AAAA,EAEF,SAAS,KAAA,EAAO;AACd,IAAA,MAAA,CAAO,KAAA,CAAM,qCAAgC,KAAK,CAAA;AAClD,IAAA,MAAM,KAAA;AAAA,EACR;AACF;AAKA,SAAS,eAAA,CAAgB,QAAA,EAAiB,WAAA,EAAoB,MAAA,EAAsB;AAClF,EAAA,MAAM,WAAA,GAAc,IAAI,GAAA,CAAI,QAAA,CAAS,GAAA,CAAI,CAAA,GAAA,KAAO,CAAC,GAAA,CAAI,IAAA,EAAM,GAAG,CAAC,CAAC,CAAA;AAChE,EAAA,MAAM,MAAA,GAAS,IAAI,GAAA,CAAI,WAAA,CAAY,GAAA,CAAI,CAAA,GAAA,KAAO,CAAC,GAAA,CAAI,IAAA,EAAM,GAAG,CAAC,CAAC,CAAA;AAE9D,EAAA,MAAM,KAAA,GAAQ,YAAY,MAAA,CAAO,CAAA,GAAA,KAAO,CAAC,WAAA,CAAY,GAAA,CAAI,GAAA,CAAI,IAAI,CAAC,CAAA;AAClE,EAAA,MAAM,QAAA,GAAW,WAAA,CAAY,MAAA,CAAO,CAAA,GAAA,KAAO;AACzC,IAAA,MAAM,WAAA,GAAc,WAAA,CAAY,GAAA,CAAI,GAAA,CAAI,IAAI,CAAA;AAC5C,IAAA,OAAO,WAAA,IAAe,CAAC,aAAA,CAAc,WAAA,EAAa,GAAG,CAAA;AAAA,EACvD,CAAC,CAAA;AACD,EAAA,MAAM,QAAA,GAAW,SAAS,MAAA,CAAO,CAAA,GAAA,KAAO,CAAC,MAAA,CAAO,GAAA,CAAI,GAAA,CAAI,IAAI,CAAC,CAAA;AAE7D,EAAA,IAAI,KAAA,CAAM,WAAW,CAAA,IAAK,QAAA,CAAS,WAAW,CAAA,IAAK,QAAA,CAAS,WAAW,CAAA,EAAG;AACxE,IAAA,MAAA,CAAO,KAAK,yDAAkD,CAAA;AAC9D,IAAA;AAAA,EACF;AAEA,EAAA,MAAA,CAAO,KAAK,uCAAgC,CAAA;AAE5C,EAAA,IAAI,KAAA,CAAM,SAAS,CAAA,EAAG;AACpB,IAAA,MAAA,CAAO,IAAA,CAAK,CAAA,gBAAA,EAAc,KAAA,CAAM,MAAM,CAAA,YAAA,CAAc,CAAA;AACpD,IAAA,KAAA,CAAM,OAAA,CAAQ,CAAA,GAAA,KAAO,MAAA,CAAO,IAAA,CAAK,CAAA,OAAA,EAAU,GAAA,CAAI,IAAI,CAAA,EAAA,EAAK,GAAA,CAAI,WAAW,CAAA,CAAE,CAAC,CAAA;AAAA,EAC5E;AAEA,EAAA,IAAI,QAAA,CAAS,SAAS,CAAA,EAAG;AACvB,IAAA,MAAA,CAAO,IAAA,CAAK,CAAA,qBAAA,EAAiB,QAAA,CAAS,MAAM,CAAA,YAAA,CAAc,CAAA;AAC1D,IAAA,QAAA,CAAS,OAAA,CAAQ,CAAA,GAAA,KAAO,MAAA,CAAO,IAAA,CAAK,CAAA,OAAA,EAAU,GAAA,CAAI,IAAI,CAAA,EAAA,EAAK,GAAA,CAAI,WAAW,CAAA,CAAE,CAAC,CAAA;AAAA,EAC/E;AAEA,EAAA,IAAI,QAAA,CAAS,SAAS,CAAA,EAAG;AACvB,IAAA,MAAA,CAAO,IAAA,CAAK,CAAA,kBAAA,EAAgB,QAAA,CAAS,MAAM,CAAA,YAAA,CAAc,CAAA;AACzD,IAAA,QAAA,CAAS,OAAA,CAAQ,CAAA,GAAA,KAAO,MAAA,CAAO,IAAA,CAAK,CAAA,OAAA,EAAU,GAAA,CAAI,IAAI,CAAA,EAAA,EAAK,GAAA,CAAI,WAAW,CAAA,CAAE,CAAC,CAAA;AAAA,EAC/E;AACF;AAKA,SAAS,aAAA,CAAc,MAAW,IAAA,EAAoB;AACpD,EAAA,OACE,IAAA,CAAK,SAAS,IAAA,CAAK,IAAA,IACnB,KAAK,WAAA,KAAgB,IAAA,CAAK,eAC1B,IAAA,CAAK,SAAA,CAAU,KAAK,OAAA,IAAW,EAAE,CAAA,KAAM,IAAA,CAAK,UAAU,IAAA,CAAK,OAAA,IAAW,EAAE,CAAA;AAE5E;AAKA,SAASC,oBAAAA,GAAsB;AAC7B,EAAA,OAAO;AAAA,IACL,KAAA,EAAO,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,MAAM,CAAA,QAAA,EAAW,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA,IACvF,IAAA,EAAM,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,KAAK,CAAA,OAAA,EAAU,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA,IACpF,IAAA,EAAM,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,KAAK,CAAA,OAAA,EAAU,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA,IACpF,KAAA,EAAO,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,MAAM,CAAA,QAAA,EAAW,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI;AAAA,GACzF;AACF;AAoBO,SAAS,oBAAA,CAAqB,UAA+B,MAAA,EAAiB;AACnF,EAAA,MAAM,UAAA,GAAa,IAAI,GAAA,CAAI,QAAA,CAAS,GAAA,CAAI,CAAA,GAAA,KAAO,CAAC,GAAA,CAAI,IAAA,CAAK,IAAA,EAAM,GAAG,CAAC,CAAC,CAAA;AAEpE,EAAA,OAAO,OAAO,WAAA,KAAqB;AACjC,IAAA,IAAI,CAAC,WAAA,CAAY,kBAAA,EAAmB,EAAG;AAEvC,IAAA,MAAM,OAAA,GAAU,UAAA,CAAW,GAAA,CAAI,WAAA,CAAY,WAAW,CAAA;AACtD,IAAA,IAAI,CAAC,OAAA,EAAS;AAEd,IAAA,MAAM,OAAA,GAAU,EAAE,MAAA,EAAQ,WAAA,CAAY,QAAQ,MAAA,EAAQ,MAAA,IAAUA,sBAAoB,EAAE;AAEtF,IAAA,IAAI;AAEF,MAAA,IAAI,QAAQ,KAAA,EAAO;AACjB,QAAA,MAAM,WAAA,GAAc,MAAM,OAAA,CAAQ,KAAA,CAAM,aAAa,OAAO,CAAA;AAC5D,QAAA,IAAI,gBAAgB,IAAA,EAAM;AACxB,UAAA,MAAM,YAAA,GAAe,OAAO,WAAA,KAAgB,QAAA,GACxC,WAAA,GACA,eAAA;AAEJ,UAAA,MAAM,YAAY,KAAA,CAAM;AAAA,YACtB,OAAA,EAAS,YAAA;AAAA,YACT,SAAA,EAAW;AAAA,WACZ,CAAA;AACD,UAAA;AAAA,QACF;AAAA,MACF;AAGA,MAAA,MAAM,OAAA,CAAQ,GAAA,CAAI,WAAA,EAAa,OAAO,CAAA;AAAA,IAExC,SAAS,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,OAAO,KAAA,CAAM,CAAA,iBAAA,EAAoB,WAAA,CAAY,WAAW,KAAK,KAAK,CAAA;AAE1E,MAAA,MAAM,YAAA,GAAe,iDAAA;AAErB,MAAA,IAAI,WAAA,CAAY,OAAA,IAAW,WAAA,CAAY,QAAA,EAAU;AAC/C,QAAA,MAAM,WAAA,CAAY,UAAU,YAAY,CAAA;AAAA,MAC1C,CAAA,MAAO;AACL,QAAA,MAAM,YAAY,KAAA,CAAM,EAAE,SAAS,YAAA,EAAc,SAAA,EAAW,MAAM,CAAA;AAAA,MACpE;AAAA,IACF;AAAA,EACF,CAAA;AACF;AA6BO,SAAS,0BAAA,CACd,cAAA,EACA,MAAA,GAAiB,GAAA,EACjB,MAAA,EACA;AACA,EAAA,MAAM,UAAA,uBAAiB,GAAA,EAAqC;AAG5D,EAAA,KAAA,MAAW,OAAO,cAAA,EAAgB;AAChC,IAAA,UAAA,CAAW,GAAA,CAAI,GAAA,CAAI,IAAA,EAAM,GAAG,CAAA;AAC5B,IAAA,IAAI,IAAI,OAAA,EAAS;AACf,MAAA,KAAA,MAAW,KAAA,IAAS,IAAI,OAAA,EAAS;AAC/B,QAAA,UAAA,CAAW,GAAA,CAAI,OAAO,GAAG,CAAA;AAAA,MAC3B;AAAA,IACF;AAAA,EACF;AAEA,EAAA,OAAO,OAAO,OAAA,KAAqB;AAEjC,IAAA,IAAI,OAAA,CAAQ,OAAO,GAAA,IAAO,CAAC,QAAQ,OAAA,CAAQ,UAAA,CAAW,MAAM,CAAA,EAAG;AAG/D,IAAA,MAAM,IAAA,GAAO,OAAA,CAAQ,OAAA,CAAQ,KAAA,CAAM,MAAA,CAAO,MAAM,CAAA,CAAE,IAAA,EAAK,CAAE,KAAA,CAAM,IAAI,CAAA;AACnE,IAAA,MAAM,WAAA,GAAc,IAAA,CAAK,KAAA,EAAM,EAAG,WAAA,EAAY;AAE9C,IAAA,IAAI,CAAC,WAAA,EAAa;AAElB,IAAA,MAAM,OAAA,GAAU,UAAA,CAAW,GAAA,CAAI,WAAW,CAAA;AAC1C,IAAA,IAAI,CAAC,OAAA,EAAS;AAEd,IAAA,MAAM,OAAA,GAAU,EAAE,MAAA,EAAQ,OAAA,CAAQ,QAAQ,MAAA,EAAQ,MAAA,IAAUA,sBAAoB,EAAE;AAElF,IAAA,IAAI;AAEF,MAAA,IAAI,QAAQ,KAAA,EAAO;AACjB,QAAA,MAAM,cAAc,MAAM,OAAA,CAAQ,KAAA,CAAM,OAAA,EAAS,MAAM,OAAO,CAAA;AAC9D,QAAA,IAAI,gBAAgB,IAAA,EAAM;AACxB,UAAA,MAAM,YAAA,GAAe,OAAO,WAAA,KAAgB,QAAA,GACxC,WAAA,GACA,eAAA;AAEJ,UAAA,MAAM,OAAA,CAAQ,MAAM,YAAY,CAAA;AAChC,UAAA;AAAA,QACF;AAAA,MACF;AAGA,MAAA,MAAM,OAAA,CAAQ,GAAA,CAAI,OAAA,EAAS,IAAA,EAAM,OAAO,CAAA;AAAA,IAE1C,SAAS,KAAA,EAAO;AACd,MAAA,OAAA,CAAQ,MAAA,CAAO,KAAA,CAAM,CAAA,wBAAA,EAA2B,WAAW,KAAK,KAAK,CAAA;AACrE,MAAA,MAAM,OAAA,CAAQ,MAAM,iDAAiD,CAAA;AAAA,IACvE;AAAA,EACF,CAAA;AACF;ACnUO,SAAS,IAAA,GAAoB;AAClC,EAAA,OAAO,IAAI,eAAA,EAAgB;AAC7B;AAEA,IAAM,kBAAN,MAA6C;AAAA;AAAA,EAEnC,MAAA;AAAA,EACA,YAAsB,EAAC;AAAA;AAAA,EAEvB,SAAA;AAAA;AAAA,EAEA,SAAA;AAAA;AAAA,EAEA,WAAA;AAAA,EAER,MAAM,GAAA,EAAmB;AACvB,IAAA,IAAA,CAAK,MAAA,GAAS,GAAA;AACd,IAAA,OAAO,IAAA;AAAA,EACT;AAAA,EAEA,QAAQ,EAAA,EAAuB;AAC7B,IAAA,IAAA,CAAK,SAAA,CAAU,KAAK,EAAE,CAAA;AACtB,IAAA,OAAO,IAAA;AAAA,EACT;AAAA,EAEA,MAAM,GAAA,EAAmB;AACvB,IAAA,IAAA,CAAK,SAAA,GAAY,GAAA;AACjB,IAAA,OAAO,IAAA;AAAA,EACT;AAAA,EAEA,MAAM,GAAA,EAAmB;AACvB,IAAA,IAAA,CAAK,SAAA,GAAY,GAAA;AACjB,IAAA,OAAO,IAAA;AAAA,EACT;AAAA,EAEA,OAAO,EAAA,EAAuB;AAC5B,IAAA,IAAA,CAAK,WAAA,GAAc,EAAA;AACnB,IAAA,OAAO,IAAA;AAAA,EACT;AAAA,EAEA,WAAA,GAAmC;AAIjC,IAAA,OAAO;AAAA,MACL,MAAM,aAAA,CAAc,SAAA;AAAA,MACpB,YAAY;AAAC,KACf;AAAA,EACF;AAAA,EAEA,eAAe,IAAA,EAA+C;AAG5D,IAAA,OAAO;AAAA,MACL,UAAA,EAAY,IAAA;AAAA,MACZ,OAAO,YAAA,CAAa;AAAA,KACtB;AAAA,EACF;AACF,CAAA;AAMO,IAAM,GAAA,GAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOjB,OAAA,CAAQ,IAAY,KAAA,EAA8B;AAChD,IAAA,OAAO,IAAI,aAAA,EAAc,CACtB,WAAA,CAAY,EAAE,CAAA,CACd,QAAA,CAAS,KAAK,CAAA,CACd,QAAA,CAAS,WAAA,CAAY,OAAO,CAAA;AAAA,EACjC,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAA,CAAU,IAAY,KAAA,EAA8B;AAClD,IAAA,OAAO,IAAI,aAAA,EAAc,CACtB,WAAA,CAAY,EAAE,CAAA,CACd,QAAA,CAAS,KAAK,CAAA,CACd,QAAA,CAAS,WAAA,CAAY,SAAS,CAAA;AAAA,EACnC,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAA,CAAO,IAAY,KAAA,EAA8B;AAC/C,IAAA,OAAO,IAAI,aAAA,EAAc,CACtB,WAAA,CAAY,EAAE,CAAA,CACd,QAAA,CAAS,KAAK,CAAA,CACd,QAAA,CAAS,WAAA,CAAY,MAAM,CAAA;AAAA,EAChC,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAA,CAAK,KAAa,KAAA,EAA8B;AAC9C,IAAA,OAAO,IAAI,aAAA,EAAc,CACtB,MAAA,CAAO,GAAG,CAAA,CACV,QAAA,CAAS,KAAK,CAAA,CACd,QAAA,CAAS,WAAA,CAAY,IAAI,CAAA;AAAA,EAC9B;AACF;AAmBO,SAAS,aAAa,KAAA,EAAyB;AACpD,EAAA,MAAM,UAAU,IAAA,EAAK;AAGrB,EAAA,IAAI,KAAA,CAAM,MAAM,KAAA,EAAO;AACrB,IAAA,OAAA,CAAQ,KAAA,CAAM,KAAA,CAAM,IAAA,CAAK,KAAK,CAAA;AAAA,EAChC;AAEA,EAAA,IAAI,KAAA,CAAM,MAAM,WAAA,EAAa;AAC3B,IAAA,OAAA,CAAQ,OAAA,CAAQ,KAAA,CAAM,IAAA,CAAK,WAAW,CAAA;AAAA,EACxC;AAEA,EAAA,IAAI,KAAA,CAAM,IAAA,EAAM,SAAA,EAAW,GAAA,EAAK;AAC9B,IAAA,OAAA,CAAQ,KAAA,CAAM,KAAA,CAAM,IAAA,CAAK,SAAA,CAAU,GAAG,CAAA;AAAA,EACxC;AAEA,EAAA,IAAI,KAAA,CAAM,IAAA,EAAM,KAAA,EAAO,GAAA,EAAK;AAC1B,IAAA,OAAA,CAAQ,KAAA,CAAM,KAAA,CAAM,IAAA,CAAK,KAAA,CAAM,GAAG,CAAA;AAAA,EACpC;AAEA,EAAA,IAAI,KAAA,CAAM,IAAA,EAAM,MAAA,EAAQ,IAAA,EAAM;AAC5B,IAAA,OAAA,CAAQ,MAAA,CAAO,KAAA,CAAM,IAAA,CAAK,MAAA,CAAO,IAAI,CAAA;AAAA,EACvC;AAEA,EAAA,OAAO,OAAA;AACT;ACpKA,eAAsB,OAAA,CACpB,WAAA,EACA,IAAA,EACA,OAAA,GAA0B,EAAC,EACT;AAClB,EAAA,MAAM;AAAA,IACJ,KAAA,GAAQ,aAAA;AAAA,IACR,IAAA,GAAO,YAAA;AAAA,IACP,SAAA,GAAY,GAAA;AAAA,IACZ,SAAA,GAAY,KAAA;AAAA,IACZ,EAAA,GAAK,CAAC,IAAA,KAAS;AAAA,GACjB,GAAI,OAAA;AAGJ,EAAA,MAAM,QAAA,GAAW,IAAA,EAAK,CAAE,OAAA,CAAQ,CAAA;;AAAA,EAAmC,IAAI,CAAA,CAAE,CAAA;AACzE,EAAA,MAAM,WAAA,GAAc,GAAG,QAAQ,CAAA;AAE/B,EAAA,MAAM,SAAA,GAAY,IAAIC,gBAAAA,EAAgC,CAAE,aAAA;AAAA,IACtD,GAAA,CAAI,MAAA,CAAO,KAAA,EAAO,KAAK,CAAA;AAAA,IACvB,GAAA,CAAI,SAAA,CAAU,IAAA,EAAM,IAAI;AAAA,GAC1B;AAEA,EAAA,MAAM,QAAA,GAAW,WAAA,CAAY,WAAA,CAAY,SAAS,CAAA;AAClD,EAAA,MAAM,KAAA,GAAQ,QAAA,CAAS,KAAA,IAAS,SAAA,GAAYC,aAAa,SAAA,GAAY,CAAA,CAAA;AAGrE,EAAA,IAAI,OAAA;AACJ,EAAA,IAAI,WAAA,CAAY,OAAA,IAAW,WAAA,CAAY,QAAA,EAAU;AAC/C,IAAA,MAAM,KAAA,GAAQ,MAAM,WAAA,CAAY,SAAA,CAAU,EAAE,UAAA,EAAY,QAAA,CAAS,UAAA,EAAY,KAAA,EAAO,CAAA;AACpF,IAAA,OAAA,GAAU,KAAA;AAAA,EACZ,CAAA,MAAO;AACL,IAAA,MAAM,KAAA,GAAQ,MAAM,WAAA,CAAY,KAAA,CAAM,EAAE,UAAA,EAAY,QAAA,CAAS,UAAA,EAAY,KAAA,EAAO,UAAA,EAAY,IAAA,EAAM,CAAA;AAClG,IAAA,OAAA,GAAU,KAAA;AAAA,EACZ;AAEA,EAAA,IAAI;AAEF,IAAA,MAAM,iBAAA,GAAoB,MAAM,OAAA,CAAQ,qBAAA,CAAsB;AAAA,MAC5D,MAAA,EAAQ,CAAC,CAAA,KAAmC,CAAC,OAAO,IAAI,CAAA,CAAE,QAAA,CAAS,CAAA,CAAE,QAAQ,CAAA,IAAK,CAAA,CAAE,IAAA,CAAK,EAAA,KAAO,YAAY,IAAA,CAAK,EAAA;AAAA,MACjH,IAAA,EAAM,SAAA;AAAA,MACN,eAAeC,aAAAA,CAAc;AAAA,KAC9B,CAAA;AAED,IAAA,MAAM,SAAA,GAAY,kBAAkB,QAAA,KAAa,KAAA;AAGjD,IAAA,MAAM,UAAA,GAAa,MAAK,CAAE,OAAA;AAAA,MACxB,YACI,4CAAA,GACA;AAAA,KACN;AAEA,IAAA,MAAM,cAAA,GAAiB,WAAW,WAAA,EAAY;AAC9C,IAAA,MAAM,kBAAkB,MAAA,CAAO,EAAE,UAAA,EAAY,cAAA,CAAe,YAAY,CAAA;AAExE,IAAA,OAAO,SAAA;AAAA,EACT,SAAS,KAAA,EAAO;AAEd,IAAA,MAAM,WAAA,GAAc,IAAA,EAAK,CAAE,OAAA,CAAQ,6CAAwC,CAAA;AAE3E,IAAA,IAAI;AACF,MAAA,MAAM,eAAA,GAAkB,YAAY,WAAA,EAAY;AAChD,MAAA,MAAM,YAAY,SAAA,CAAU,EAAE,UAAA,EAAY,eAAA,CAAgB,YAAY,CAAA;AAAA,IACxE,CAAA,CAAA,MAAQ;AAAA,IAER;AAEA,IAAA,OAAO,KAAA;AAAA,EACT;AACF;AA+BA,eAAsB,QAAA,CACpB,WAAA,EACA,KAAA,EACA,OAAA,GAA2B,EAAC,EACb;AACf,EAAA,MAAM;AAAA,IACJ,OAAA,GAAU,EAAA;AAAA,IACV,SAAA,GAAY,GAAA;AAAA;AAAA,IACZ,SAAA,GAAY,KAAA;AAAA,IACZ,MAAA,GAAS;AAAA,GACX,GAAI,OAAA;AAEJ,EAAA,IAAI,KAAA,CAAM,WAAW,CAAA,EAAG;AACtB,IAAA,MAAM,SAAA,GAAY,IAAA,EAAK,CAAE,OAAA,CAAQ,mCAA4B,CAAA;AAC7D,IAAA,MAAM,QAAA,GAAW,UAAU,WAAA,EAAY;AACvC,IAAA,QAAA,CAAS,KAAA,GAAQ,QAAA,CAAS,KAAA,IAAS,SAAA,GAAYD,aAAa,SAAA,GAAY,CAAA,CAAA;AAExE,IAAA,MAAM,YAAA,GAAe,QAAA;AACrB,IAAA,MAAM,WAAA,CAAY,MAAM,EAAE,UAAA,EAAY,aAAa,UAAA,EAAY,KAAA,EAAO,YAAA,CAAa,KAAA,EAAc,CAAA;AACjG,IAAA;AAAA,EACF;AAEA,EAAA,MAAM,UAAA,GAAa,IAAA,CAAK,IAAA,CAAK,KAAA,CAAM,SAAS,OAAO,CAAA;AACnD,EAAA,IAAI,WAAA,GAAc,CAAA;AAElB,EAAA,MAAM,UAAA,GAAa,OAAO,SAAA,EAAmB,iBAAA,KAA2B;AACtE,IAAA,MAAM,aAAa,SAAA,GAAY,OAAA;AAC/B,IAAA,MAAM,WAAW,IAAA,CAAK,GAAA,CAAI,UAAA,GAAa,OAAA,EAAS,MAAM,MAAM,CAAA;AAC5D,IAAA,MAAM,SAAA,GAAY,KAAA,CAAM,KAAA,CAAM,UAAA,EAAY,QAAQ,CAAA;AAElD,IAAA,MAAM,QAAA,GAAW,MAAA,CAAO,SAAA,EAAW,SAAA,GAAY,GAAG,UAAU,CAAA;AAE5D,IAAA,MAAM,SAAA,GAAY,IAAID,gBAAAA,EAAgC;AAGtD,IAAA,IAAI,aAAa,CAAA,EAAG;AAClB,MAAA,SAAA,CAAU,aAAA;AAAA,QACR,IAAI,SAAA,CAAU,YAAA,EAAc,cAAI,CAAA,CAAE,WAAA,CAAY,cAAc,CAAC,CAAA;AAAA,QAC7D,IAAI,SAAA,CAAU,WAAA,EAAa,cAAI,CAAA,CAAE,WAAA,CAAY,cAAc,CAAC,CAAA;AAAA,QAC5D,GAAA,CAAI,UAAU,WAAA,EAAa,cAAI,EAAE,WAAA,CAAY,SAAA,KAAc,aAAa,CAAC,CAAA;AAAA,QACzE,GAAA,CAAI,UAAU,WAAA,EAAa,cAAI,EAAE,WAAA,CAAY,SAAA,KAAc,aAAa,CAAC;AAAA,OAC3E;AAAA,IACF;AAEA,IAAA,MAAM,QAAA,GAAW,QAAA,CAAS,WAAA,CAAY,SAAS,CAAA;AAC/C,IAAA,QAAA,CAAS,KAAA,GAAQ,QAAA,CAAS,KAAA,IAAS,SAAA,GAAYC,aAAa,SAAA,GAAY,CAAA,CAAA;AAExE,IAAA,OAAO,MAAM,iBAAA,CAAkB,MAAA,GAC7B,iBAAA,CAAkB,OAAO,QAAQ,CAAA,GACjC,iBAAA,CAAkB,KAAA,CAAM,EAAE,GAAG,QAAA,EAAU,UAAA,EAAY,MAAM,CAAA;AAAA,EAC7D,CAAA;AAGA,EAAA,IAAI,OAAA;AACJ,EAAA,IAAI,WAAA,CAAY,OAAA,IAAW,WAAA,CAAY,QAAA,EAAU;AAC/C,IAAA,OAAA,GAAU,MAAM,UAAA,CAAW,WAAA,EAAa,EAAE,MAAA,EAAQ,YAAY,SAAA,CAAU,IAAA,CAAK,WAAW,CAAA,EAAG,CAAA;AAAA,EAC7F,CAAA,MAAO;AACL,IAAA,OAAA,GAAU,MAAM,UAAA,CAAW,WAAA,EAAa,WAAW,CAAA;AAAA,EACrD;AAEA,EAAA,IAAI,cAAc,CAAA,EAAG;AAGrB,EAAA,MAAM,SAAA,GAAY,QAAQ,+BAAA,CAAgC;AAAA,IACxD,QAAQ,CAAC,CAAA,KAAmC,EAAE,IAAA,CAAK,EAAA,KAAO,YAAY,IAAA,CAAK,EAAA;AAAA,IAC3E,IAAA,EAAM,SAAA;AAAA,IACN,eAAeC,aAAAA,CAAc;AAAA,GAC9B,CAAA;AAED,EAAA,SAAA,CAAU,EAAA,CAAG,SAAA,EAAW,OAAO,iBAAA,KAAmD;AAChF,IAAA,QAAQ,kBAAkB,QAAA;AAAU,MAClC,KAAK,YAAA;AACH,QAAA,WAAA,GAAc,CAAA;AACd,QAAA;AAAA,MACF,KAAK,WAAA;AACH,QAAA,WAAA,GAAc,IAAA,CAAK,GAAA,CAAI,CAAA,EAAG,WAAA,GAAc,CAAC,CAAA;AACzC,QAAA;AAAA,MACF,KAAK,WAAA;AACH,QAAA,WAAA,GAAc,IAAA,CAAK,GAAA,CAAI,UAAA,GAAa,CAAA,EAAG,cAAc,CAAC,CAAA;AACtD,QAAA;AAAA,MACF,KAAK,WAAA;AACH,QAAA,WAAA,GAAc,UAAA,GAAa,CAAA;AAC3B,QAAA;AAAA;AAGJ,IAAA,MAAM,UAAA,CAAW,aAAa,iBAAiB,CAAA;AAAA,EACjD,CAAC,CAAA;AAED,EAAA,SAAA,CAAU,EAAA,CAAG,OAAO,YAAY;AAE9B,IAAA,IAAI;AACF,MAAA,MAAM,WAAA,GAAc,MAAA;AAAA,QAClB,KAAA,CAAM,KAAA,CAAM,WAAA,GAAc,OAAA,EAAS,IAAA,CAAK,GAAA,CAAA,CAAK,WAAA,GAAc,CAAA,IAAK,OAAA,EAAS,KAAA,CAAM,MAAM,CAAC,CAAA;AAAA,QACtF,WAAA,GAAc,CAAA;AAAA,QACd;AAAA,OACF;AAEO,MAAA,MAAM,eAAA,GAAkB,YAAY,WAAA,EAAY;AACtD,MAAA,MAAM,YAAY,SAAA,CAAU,EAAE,UAAA,EAAY,eAAA,CAAgB,YAAY,CAAA;AAAA,IACzE,CAAA,CAAA,MAAQ;AAAA,IAER;AAAA,EACF,CAAC,CAAA;AACH;AAoBA,eAAsB,cAAA,CACpB,OAAA,EACA,OAAA,GAA0B,EAAC,EACa;AACxC,EAAA,MAAM;AAAA,IACJ,SAAS,MAAM,IAAA;AAAA,IACf,IAAA,GAAO,GAAA;AAAA,IACP,GAAA,GAAM;AAAA,GACR,GAAI,OAAA;AAEJ,EAAA,OAAO,IAAI,OAAA,CAAQ,CAAC,OAAA,KAAY;AAC9B,IAAA,MAAM,YAA2C,EAAC;AAElD,IAAA,MAAM,SAAA,GAAY,QAAQ,+BAAA,CAAgC;AAAA,MACxD,MAAA;AAAA,MACA,IAAA;AAAA,MACA,GAAA;AAAA,MACA,eAAeA,aAAAA,CAAc;AAAA,KAC9B,CAAA;AAED,IAAA,SAAA,CAAU,EAAA,CAAG,SAAA,EAAW,CAAC,WAAA,KAA6C;AACpE,MAAA,SAAA,CAAU,KAAK,WAAW,CAAA;AAAA,IAC5B,CAAC,CAAA;AAED,IAAA,SAAA,CAAU,EAAA,CAAG,OAAO,MAAM;AACxB,MAAA,OAAA,CAAQ,SAAS,CAAA;AAAA,IACnB,CAAC,CAAA;AAAA,EACH,CAAC,CAAA;AACH;AAKA,SAAS,qBAAA,CAAsB,KAAA,EAAiB,IAAA,EAAc,UAAA,EAA6C;AACzG,EAAA,MAAM,OAAA,GAAU,KAAA,CAAM,IAAA,CAAK,IAAI,CAAA,IAAK,uBAAA;AACpC,EAAA,OAAO,MAAK,CACT,OAAA,CAAQ,CAAA,iBAAA,EAAa,IAAI,OAAO,UAAU,CAAA;;AAAA,EAAS,OAAO,CAAA,CAAE,CAAA,CAC5D,OAAO,CAAA,EAAG,KAAA,CAAM,MAAM,CAAA,mBAAA,CAAqB,CAAA;AAChD;AA2CO,SAAS,KAAA,CAAM,EAAA,EAAY,KAAA,EAAe,MAAA,EAAoC;AACnF,EAAA,MAAMC,MAAAA,GAAQ,IAAI,YAAA,EAAa,CAC5B,YAAY,EAAE,CAAA,CACd,SAAS,KAAK,CAAA;AAEjB,EAAA,MAAM,aAAmD,EAAC;AAE1D,EAAA,KAAA,MAAW,SAAS,MAAA,EAAQ;AAC1B,IAAA,MAAM,KAAA,GAAQ,IAAI,gBAAA,EAAiB,CAChC,WAAA,CAAY,MAAM,EAAE,CAAA,CACpB,QAAA,CAAS,KAAA,CAAM,KAAK,CAAA,CACpB,SAAS,KAAA,CAAM,KAAA,KAAU,WAAA,GAAc,cAAA,CAAe,SAAA,GAAY,cAAA,CAAe,KAAK,CAAA,CACtF,WAAA,CAAY,KAAA,CAAM,QAAA,IAAY,KAAK,CAAA;AAEtC,IAAA,IAAI,MAAM,SAAA,EAAW;AACnB,MAAA,KAAA,CAAM,YAAA,CAAa,MAAM,SAAS,CAAA;AAAA,IACpC;AAEA,IAAA,IAAI,MAAM,WAAA,EAAa;AACrB,MAAA,KAAA,CAAM,cAAA,CAAe,MAAM,WAAW,CAAA;AAAA,IACxC;AAEA,IAAA,IAAI,MAAM,KAAA,EAAO;AACf,MAAA,KAAA,CAAM,QAAA,CAAS,MAAM,KAAK,CAAA;AAAA,IAC5B;AAEA,IAAA,MAAM,SAAA,GAAY,IAAIH,gBAAAA,EAAmC,CAAE,cAAc,KAAK,CAAA;AAC9E,IAAA,UAAA,CAAW,KAAK,SAAS,CAAA;AAAA,EAC3B;AAEA,EAAA,OAAOG,MAAAA,CAAM,cAAc,UAAU,CAAA;AACvC;AAwBA,eAAsB,UAAA,CACpB,WAAA,EACAA,MAAAA,EACA,SAAA,GAAoB,GAAA,EACa;AACjC,EAAA,MAAM,WAAA,CAAY,UAAUA,MAAK,CAAA;AAEjC,EAAA,IAAI;AACF,IAAA,MAAM,gBAAA,GAAmB,MAAM,WAAA,CAAY,gBAAA,CAAiB;AAAA,MAC1D,MAAA,EAAQ,CAAC,CAAA,KAAM,CAAA,CAAE,QAAA,KAAaA,MAAAA,CAAM,IAAA,CAAK,SAAA,IAAa,CAAA,CAAE,IAAA,CAAK,EAAA,KAAO,WAAA,CAAY,IAAA,CAAK,EAAA;AAAA,MACrF,IAAA,EAAM;AAAA,KACP,CAAA;AAED,IAAA,MAAM,OAA+B,EAAC;AAEtC,IAAA,KAAA,MAAW,SAAA,IAAa,iBAAiB,UAAA,EAAY;AACnD,MAAA,IAAI,UAAU,UAAA,CAAW,CAAC,CAAA,EAAG,IAAA,KAASD,cAAc,SAAA,EAAW;AAC7D,QAAA,MAAM,KAAA,GAAQ,SAAA,CAAU,UAAA,CAAW,CAAC,CAAA;AACpC,QAAA,IAAA,CAAK,KAAA,CAAM,QAAQ,CAAA,GAAI,KAAA,CAAM,KAAA;AAAA,MAC/B;AAAA,IACF;AAEA,IAAA,OAAO,IAAA;AAAA,EACT,SAAS,KAAA,EAAO;AACd,IAAA,MAAM,IAAI,MAAM,6CAA6C,CAAA;AAAA,EAC/D;AACF;;;ACncO,SAAS,QAAA,CAAS,IAAA,EAAY,OAAA,GAAuB,EAAC,EAAS;AACpE,EAAA,MAAM;AAAA,IACJ,UAAA,GAAa,CAAA;AAAA,IACb,WAAA,GAAc,GAAA;AAAA,IACd,SAASH,oBAAAA;AAAoB,GAC/B,GAAI,OAAA;AAGJ,EAAA,MAAM,YAAA,GAAe,IAAA,CAAK,IAAA,CAAK,IAAA,CAAK,IAAI,CAAA;AACxC,EAAA,MAAM,aAAA,GAAgB,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,IAAI,CAAA;AAC1C,EAAA,MAAM,cAAA,GAAiB,IAAA,CAAK,MAAA,CAAO,IAAA,CAAK,IAAI,CAAA;AAG5C,EAAA,IAAA,CAAK,IAAA,GAAO,OAAO,KAAA,EAAYK,QAAAA,KAAkB;AAC/C,IAAA,OAAO,MAAM,gBAAA;AAAA,MACX,MAAM,YAAA,CAAa,KAAA,EAAOA,QAAO,CAAA;AAAA,MACjC,UAAA;AAAA,MACA,WAAA;AAAA,MACA,MAAA;AAAA,MACA;AAAA,KACF;AAAA,EACF,CAAA;AAGA,EAAA,IAAA,CAAK,KAAA,GAAQ,OAAO,KAAA,EAAYA,QAAAA,KAAkB;AAChD,IAAA,OAAO,MAAM,gBAAA;AAAA,MACX,MAAM,aAAA,CAAc,KAAA,EAAOA,QAAO,CAAA;AAAA,MAClC,UAAA;AAAA,MACA,WAAA;AAAA,MACA,MAAA;AAAA,MACA;AAAA,KACF;AAAA,EACF,CAAA;AAGA,EAAA,IAAA,CAAK,MAAA,GAAS,OAAO,KAAA,EAAYA,QAAAA,KAAkB;AACjD,IAAA,OAAO,MAAM,gBAAA;AAAA,MACX,MAAM,cAAA,CAAe,KAAA,EAAOA,QAAO,CAAA;AAAA,MACnC,UAAA;AAAA,MACA,WAAA;AAAA,MACA,MAAA;AAAA,MACA;AAAA,KACF;AAAA,EACF,CAAA;AAEA,EAAA,OAAO,IAAA;AACT;AAKA,eAAe,gBAAA,CACb,EAAA,EACA,UAAA,EACA,WAAA,EACA,QACA,MAAA,EACc;AACd,EAAA,IAAI,SAAA;AAEJ,EAAA,KAAA,IAAS,OAAA,GAAU,CAAA,EAAG,OAAA,IAAW,UAAA,EAAY,OAAA,EAAA,EAAW;AACtD,IAAA,IAAI;AACF,MAAA,OAAO,MAAM,EAAA,EAAG;AAAA,IAClB,SAAS,KAAA,EAAY;AACnB,MAAA,SAAA,GAAY,KAAA;AAGZ,MAAA,IAAI,KAAA,CAAM,QAAQ,GAAA,IAAO,KAAA,CAAM,OAAO,GAAA,IAAO,KAAA,CAAM,SAAS,GAAA,EAAK;AAC/D,QAAA,MAAM,KAAA;AAAA,MACR;AAGA,MAAA,IAAI,YAAY,UAAA,EAAY;AAC1B,QAAA,MAAA,CAAO,MAAM,CAAA,OAAA,EAAU,MAAM,CAAA,eAAA,EAAkB,UAAU,aAAa,KAAK,CAAA;AAC3E,QAAA,MAAM,KAAA;AAAA,MACR;AAGA,MAAA,MAAM,KAAA,GAAQ,cAAc,IAAA,CAAK,GAAA,CAAI,GAAG,OAAO,CAAA,GAAI,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA;AAEnE,MAAA,MAAA,CAAO,IAAA,CAAK,CAAA,EAAG,MAAM,CAAA,yBAAA,EAA4B,UAAU,CAAC,CAAA,CAAA,EAAI,UAAA,GAAa,CAAC,CAAA,eAAA,EAAkB,IAAA,CAAK,KAAA,CAAM,KAAK,CAAC,CAAA,EAAA,CAAI,CAAA;AAErH,MAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,KAAK,CAAC,CAAA;AAAA,IACzD;AAAA,EACF;AAEA,EAAA,MAAM,SAAA;AACR;AAKA,SAASL,oBAAAA,GAA8B;AACrC,EAAA,OAAO;AAAA,IACL,KAAA,EAAO,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,MAAM,CAAA,OAAA,EAAU,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA,IACtF,IAAA,EAAM,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,KAAK,CAAA,OAAA,EAAU,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA,IACpF,IAAA,EAAM,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,KAAK,CAAA,OAAA,EAAU,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA,IACpF,KAAA,EAAO,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,MAAM,CAAA,OAAA,EAAU,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI;AAAA,GACxF;AACF;;;ACtHO,SAAS,OAAA,CAAQ,QAAqB,IAAA,EAAoB;AAC/D,EAAA,OAAA,CAAQ,KAAK,8CAA8C,CAAA;AAC3D,EAAA,OAAO,KAAA;AACT;AAMA,eAAsB,kBAAkB,WAAA,EAA4D;AAClG,EAAA,OAAA,CAAQ,KAAK,wDAAwD,CAAA;AACrE,EAAA,OAAO,KAAA;AACT;AAMA,eAAsB,QAAQ,OAAA,EAAgC;AAC5D,EAAA,OAAA,CAAQ,KAAK,8CAA8C,CAAA;AAC3D,EAAA,OAAO,KAAA;AACT;;;ACfO,SAAS,SAAA,CAAU,OAAe,IAAA,EAA8B;AACrE,EAAA,OAAA,CAAQ,KAAK,gDAAgD,CAAA;AAC7D,EAAA,OAAO,IAAA;AACT;AAMA,eAAsB,YAAY,OAAA,EAAsD;AACtF,EAAA,OAAA,CAAQ,KAAK,kDAAkD,CAAA;AAC/D,EAAA,OAAO,EAAE,EAAA,EAAI,KAAA,EAAO,OAAA,EAAS,EAAC,EAAE;AAClC;;;ACHA,eAAsB,cAAA,CAAe,MAAA,EAAgB,SAAA,EAAmB,SAAA,EAA4C;AAClH,EAAA,IAAI;AACF,IAAA,MAAM,OAAA,GAAU,MAAM,MAAA,CAAO,QAAA,CAAS,MAAM,SAAS,CAAA;AACrD,IAAA,IAAI,CAAC,OAAA,EAAS,WAAA,EAAY,EAAG,OAAO,IAAA;AAEpC,IAAA,MAAM,OAAA,GAAU,MAAM,OAAA,CAAQ,QAAA,CAAS,MAAM,SAAS,CAAA;AACtD,IAAA,OAAO,OAAA;AAAA,EACT,SAAS,KAAA,EAAO;AAEd,IAAA,OAAO,IAAA;AAAA,EACT;AACF;AAqBA,eAAsB,iBAAA,CAAkB,MAAA,EAAgB,OAAA,EAAiB,MAAA,EAA6C;AACpH,EAAA,IAAI;AACF,IAAA,MAAM,KAAA,GAAQ,MAAM,MAAA,CAAO,MAAA,CAAO,MAAM,OAAO,CAAA;AAC/C,IAAA,MAAM,MAAA,GAAS,MAAM,KAAA,CAAM,OAAA,CAAQ,MAAM,MAAM,CAAA;AAC/C,IAAA,OAAO,MAAA;AAAA,EACT,SAAS,KAAA,EAAO;AAEd,IAAA,OAAO,IAAA;AAAA,EACT;AACF;AAiBO,SAAS,WAAA,GAA4B;AAC1C,EAAA,MAAM,KAAA,uBAAY,GAAA,EAA6C;AAG/D,EAAA,WAAA,CAAY,MAAM;AAChB,IAAA,MAAM,GAAA,GAAM,KAAK,GAAA,EAAI;AACrB,IAAA,KAAA,MAAW,CAAC,GAAA,EAAK,KAAK,CAAA,IAAK,KAAA,CAAM,SAAQ,EAAG;AAC1C,MAAA,IAAI,KAAA,CAAM,OAAA,GAAU,CAAA,IAAK,KAAA,CAAM,UAAU,GAAA,EAAK;AAC5C,QAAA,KAAA,CAAM,OAAO,GAAG,CAAA;AAAA,MAClB;AAAA,IACF;AAAA,EACF,CAAA,EAAG,CAAA,GAAI,EAAA,GAAK,GAAI,CAAA;AAEhB,EAAA,OAAO;AAAA,IACL,MAAM,IAAO,GAAA,EAAgC;AAC3C,MAAA,MAAM,KAAA,GAAQ,KAAA,CAAM,GAAA,CAAI,GAAG,CAAA;AAC3B,MAAA,IAAI,CAAC,OAAO,OAAO,IAAA;AAEnB,MAAA,IAAI,MAAM,OAAA,GAAU,CAAA,IAAK,MAAM,OAAA,GAAU,IAAA,CAAK,KAAI,EAAG;AACnD,QAAA,KAAA,CAAM,OAAO,GAAG,CAAA;AAChB,QAAA,OAAO,IAAA;AAAA,MACT;AAEA,MAAA,OAAO,KAAA,CAAM,KAAA;AAAA,IACf,CAAA;AAAA,IAEA,MAAM,GAAA,CAAO,GAAA,EAAa,KAAA,EAAU,UAAA,EAAoC;AACtE,MAAA,MAAM,UAAU,UAAA,GAAa,IAAA,CAAK,GAAA,EAAI,GAAK,aAAa,GAAA,GAAQ,CAAA;AAChE,MAAA,KAAA,CAAM,GAAA,CAAI,GAAA,EAAK,EAAE,KAAA,EAAO,SAAS,CAAA;AAAA,IACnC,CAAA;AAAA,IAEA,MAAM,IAAI,GAAA,EAA4B;AACpC,MAAA,KAAA,CAAM,OAAO,GAAG,CAAA;AAAA,IAClB;AAAA,GACF;AACF;AAiBO,SAAS,WAAW,GAAA,EAA2B;AAGpD,EAAA,OAAA,CAAQ,KAAK,kFAAkF,CAAA;AAE/F,EAAA,OAAO;AAAA,IACL,MAAM,GAAA,GAA4B;AAChC,MAAA,OAAO,IAAA;AAAA,IACT,CAAA;AAAA,IAEA,MAAM,GAAA,GAAqB;AAAA,IAE3B,CAAA;AAAA,IAEA,MAAM,GAAA,GAAqB;AAAA,IAE3B;AAAA,GACF;AACF;;;AC7IO,SAAS,WAAW,IAAA,EAA6F;AACtH,EAAA,OAAA,CAAQ,KAAK,iDAAiD,CAAA;AAC9D,EAAA,OAAO,CAAC,CAAA,EAAgB,GAAA,EAAa,IAAA,KAA2C;AAC9E,IAAA,OAAO,GAAA;AAAA,EACT,CAAA;AACF;;;ACRO,IAAM,WAAA,GAAN,cAA0B,KAAA,CAAM;AAAA,EAC9B,IAAA;AAAA,EACA,KAAA;AAAA,EAEP,WAAA,CAAY,OAAA,EAAiB,IAAA,EAAe,KAAA,EAAiB;AAC3D,IAAA,KAAA,CAAM,OAAO,CAAA;AACb,IAAA,IAAA,CAAK,IAAA,GAAO,aAAA;AACZ,IAAA,IAAI,SAAS,MAAA,EAAW;AACtB,MAAA,IAAA,CAAK,IAAA,GAAO,IAAA;AAAA,IACd;AACA,IAAA,IAAA,CAAK,KAAA,GAAQ,KAAA;AAAA,EACf;AACF;AAKO,IAAM,sBAAA,GAAN,cAAqC,WAAA,CAAY;AAAA,EACtD,WAAA,CAAY,SAAiB,KAAA,EAAiB;AAC5C,IAAA,KAAA,CAAM,OAAA,EAAS,4BAA4B,KAAK,CAAA;AAChD,IAAA,IAAA,CAAK,IAAA,GAAO,wBAAA;AAAA,EACd;AACF;AAKO,IAAM,eAAA,GAAN,cAA8B,WAAA,CAAY;AAAA,EAC/C,WAAA,CAAY,SAAiB,KAAA,EAAiB;AAC5C,IAAA,KAAA,CAAM,OAAA,EAAS,oBAAoB,KAAK,CAAA;AACxC,IAAA,IAAA,CAAK,IAAA,GAAO,iBAAA;AAAA,EACd;AACF;AAKO,IAAM,cAAA,GAAN,cAA6B,WAAA,CAAY;AAAA,EAC9C,WAAA,CAAY,OAAA,EAAiB,UAAA,EAAqB,KAAA,EAAiB;AACjE,IAAA,KAAA,CAAM,OAAA,EAAS,oBAAoB,KAAK,CAAA;AACxC,IAAA,IAAA,CAAK,IAAA,GAAO,gBAAA;AACZ,IAAC,KAAa,UAAA,GAAa,UAAA;AAAA,EAC7B;AACF;AAsBO,SAAS,8BAAA,CAA+B,QAAgB,MAAA,EAAuB;AACpF,EAAA,MAAM,GAAA,GAAM,UAAUA,oBAAAA,EAAoB;AAE1C,EAAA,MAAA,CAAO,EAAA,CAAG,mBAAA,EAAqB,OAAO,WAAA,KAAgB;AACpD,IAAA,IAAI,CAAC,WAAA,CAAY,WAAA,EAAY,EAAG;AAGhC,IAAA,MAAM,aAAA,GAAgB,WAAA,CAAY,KAAA,CAAM,IAAA,CAAK,WAAW,CAAA;AACxD,IAAA,MAAM,gBAAA,GAAmB,WAAA,CAAY,QAAA,CAAS,IAAA,CAAK,WAAW,CAAA;AAC9D,IAAA,MAAM,iBAAA,GAAoB,WAAA,CAAY,SAAA,CAAU,IAAA,CAAK,WAAW,CAAA;AAGhE,IAAA,WAAA,CAAY,KAAA,GAAQ,qBAAA,CAAsB,aAAA,EAAe,WAAA,EAAa,GAAG,CAAA;AACzE,IAAA,WAAA,CAAY,QAAA,GAAW,qBAAA,CAAsB,gBAAA,EAAkB,WAAA,EAAa,GAAG,CAAA;AAC/E,IAAA,WAAA,CAAY,SAAA,GAAY,qBAAA,CAAsB,iBAAA,EAAmB,WAAA,EAAa,GAAG,CAAA;AAAA,EACnF,CAAC,CAAA;AAGD,EAAA,MAAA,CAAO,EAAA,CAAG,OAAA,EAAS,CAAC,KAAA,KAAU;AAC5B,IAAA,GAAA,CAAI,KAAA,CAAM,yBAAyB,KAAK,CAAA;AAAA,EAC1C,CAAC,CAAA;AAED,EAAA,MAAA,CAAO,EAAA,CAAG,MAAA,EAAQ,CAAC,OAAA,KAAY;AAC7B,IAAA,GAAA,CAAI,IAAA,CAAK,2BAA2B,OAAO,CAAA;AAAA,EAC7C,CAAC,CAAA;AAED,EAAA,GAAA,CAAI,KAAK,4CAAuC,CAAA;AAClD;AAKA,SAAS,qBAAA,CAAsB,cAAA,EAA0B,WAAA,EAAkB,MAAA,EAAgB;AACzF,EAAA,OAAO,UAAU,IAAA,KAAgB;AAC/B,IAAA,IAAI;AACF,MAAA,OAAO,MAAM,cAAA,CAAe,GAAG,IAAI,CAAA;AAAA,IACrC,SAAS,KAAA,EAAO;AACd,MAAA,MAAM,sBAAA,CAAuB,KAAA,EAAO,WAAA,EAAa,MAAM,CAAA;AACvD,MAAA,MAAM,KAAA;AAAA,IACR;AAAA,EACF,CAAA;AACF;AAKA,eAAe,sBAAA,CAAuB,KAAA,EAAgB,WAAA,EAAkB,MAAA,EAA+B;AAErG,EAAA,MAAM,aAAA,GAAgB,oBAAoB,KAAK,CAAA;AAC/C,EAAA,MAAA,CAAO,MAAM,CAAA,2BAAA,EAA8B,WAAA,CAAY,IAAA,CAAK,EAAE,KAAK,aAAa,CAAA;AAEhF,EAAA,IAAI,WAAA,GAAc,qDAAA;AAElB,EAAA,IAAI,iBAAiB,WAAA,EAAa;AAChC,IAAA,QAAQ,MAAM,IAAA;AAAM,MAClB,KAAK,kBAAA;AACH,QAAA,WAAA,GAAc,gDAAA;AACd,QAAA;AAAA,MACF,KAAK,kBAAA;AACH,QAAA,WAAA,GAAc,qDAAA;AACd,QAAA;AAAA,MACF,KAAK,0BAAA;AACH,QAAA,WAAA,GAAc,sDAAA;AACd,QAAA;AAAA;AACJ,EACF;AAEA,EAAA,IAAI;AACF,IAAA,IAAI,WAAA,CAAY,OAAA,IAAW,WAAA,CAAY,QAAA,EAAU;AAC/C,MAAA,MAAM,YAAY,SAAA,CAAU,EAAE,SAAS,WAAA,EAAa,SAAA,EAAW,MAAM,CAAA;AAAA,IACvE,CAAA,MAAO;AACL,MAAA,MAAM,YAAY,KAAA,CAAM,EAAE,SAAS,WAAA,EAAa,SAAA,EAAW,MAAM,CAAA;AAAA,IACnE;AAAA,EACF,SAAS,UAAA,EAAY;AACnB,IAAA,MAAA,CAAO,KAAA,CAAM,yCAAyC,UAAU,CAAA;AAAA,EAClE;AACF;AAKA,SAAS,oBAAoB,KAAA,EAAyB;AACpD,EAAA,IAAI,iBAAiB,KAAA,EAAO;AAC1B,IAAA,MAAM,aAAA,GAAgB,EAAE,GAAG,KAAA,EAAM;AAGjC,IAAA,IAAI,cAAc,OAAA,EAAS;AACzB,MAAA,aAAA,CAAc,OAAA,GAAU,aAAA,CAAc,OAAA,CACnC,OAAA,CAAQ,2BAAA,EAA6B,gBAAgB,CAAA,CACrD,OAAA,CAAQ,2BAAA,EAA6B,mBAAmB,CAAA,CACxD,OAAA,CAAQ,cAAc,sBAAsB,CAAA;AAAA,IACjD;AAEA,IAAA,IAAI,cAAc,KAAA,EAAO;AACvB,MAAA,aAAA,CAAc,KAAA,GAAQ,aAAA,CAAc,KAAA,CACjC,OAAA,CAAQ,2BAAA,EAA6B,gBAAgB,CAAA,CACrD,OAAA,CAAQ,2BAAA,EAA6B,mBAAmB,CAAA,CACxD,OAAA,CAAQ,cAAc,sBAAsB,CAAA;AAAA,IACjD;AAEA,IAAA,OAAO,aAAA;AAAA,EACT;AAEA,EAAA,OAAO,KAAA;AACT;AAkBO,SAAS,YAAA,CAAa,OAAA,GAGzB,EAAC,EAAW;AACd,EAAA,MAAM,EAAE,KAAA,GAAQ,MAAA,EAAQ,MAAA,GAAS,CAAC,SAAS,UAAA,EAAY,QAAA,EAAU,KAAK,CAAA,EAAE,GAAI,OAAA;AAE5E,EAAA,MAAM,MAAA,GAAS,CAAC,OAAA,EAAS,MAAA,EAAQ,QAAQ,OAAO,CAAA;AAChD,EAAA,MAAM,iBAAA,GAAoB,MAAA,CAAO,OAAA,CAAQ,KAAK,CAAA;AAE9C,EAAA,MAAM,SAAA,GAAY,CAAC,YAAA,KAAyB;AAC1C,IAAA,OAAO,MAAA,CAAO,OAAA,CAAQ,YAAY,CAAA,IAAK,iBAAA;AAAA,EACzC,CAAA;AAEA,EAAA,MAAM,aAAA,GAAgB,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB;AACzD,IAAA,IAAI,eAAA,GAAkB,OAAA;AACtB,IAAA,MAAM,YAAA,GAAe,IAAA,CAAK,GAAA,CAAI,CAAA,GAAA,KAAO;AACnC,MAAA,IAAI,OAAO,QAAQ,QAAA,EAAU;AAC3B,QAAA,IAAI,QAAA,GAAW,GAAA;AACf,QAAA,MAAA,CAAO,QAAQ,CAAA,OAAA,KAAW;AACxB,UAAA,MAAM,KAAA,GAAQ,IAAI,MAAA,CAAO,OAAA,EAAS,IAAI,CAAA;AACtC,UAAA,QAAA,GAAW,QAAA,CAAS,OAAA,CAAQ,KAAA,EAAO,YAAY,CAAA;AAAA,QACjD,CAAC,CAAA;AACD,QAAA,OAAO,QAAA;AAAA,MACT;AACA,MAAA,OAAO,GAAA;AAAA,IACT,CAAC,CAAA;AAED,IAAA,MAAA,CAAO,QAAQ,CAAA,OAAA,KAAW;AACxB,MAAA,MAAM,KAAA,GAAQ,IAAI,MAAA,CAAO,OAAA,EAAS,IAAI,CAAA;AACtC,MAAA,eAAA,GAAkB,eAAA,CAAgB,OAAA,CAAQ,KAAA,EAAO,YAAY,CAAA;AAAA,IAC/D,CAAC,CAAA;AAED,IAAA,OAAO,EAAE,OAAA,EAAS,eAAA,EAAiB,IAAA,EAAM,YAAA,EAAa;AAAA,EACxD,CAAA;AAEA,EAAA,OAAO;AAAA,IACL,KAAA,EAAO,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB;AAC1C,MAAA,IAAI,SAAA,CAAU,OAAO,CAAA,EAAG;AACtB,QAAA,MAAM,EAAE,SAAS,GAAA,EAAK,IAAA,EAAM,cAAa,GAAI,aAAA,CAAc,OAAA,EAAS,GAAG,IAAI,CAAA;AAC3E,QAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,QAAA,EAAW,GAAG,CAAA,CAAA,EAAI,GAAG,YAAY,CAAA;AAAA,MACjD;AAAA,IACF,CAAA;AAAA,IACA,IAAA,EAAM,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB;AACzC,MAAA,IAAI,SAAA,CAAU,MAAM,CAAA,EAAG;AACrB,QAAA,MAAM,EAAE,SAAS,GAAA,EAAK,IAAA,EAAM,cAAa,GAAI,aAAA,CAAc,OAAA,EAAS,GAAG,IAAI,CAAA;AAC3E,QAAA,OAAA,CAAQ,IAAA,CAAK,CAAA,OAAA,EAAU,GAAG,CAAA,CAAA,EAAI,GAAG,YAAY,CAAA;AAAA,MAC/C;AAAA,IACF,CAAA;AAAA,IACA,IAAA,EAAM,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB;AACzC,MAAA,IAAI,SAAA,CAAU,MAAM,CAAA,EAAG;AACrB,QAAA,MAAM,EAAE,SAAS,GAAA,EAAK,IAAA,EAAM,cAAa,GAAI,aAAA,CAAc,OAAA,EAAS,GAAG,IAAI,CAAA;AAC3E,QAAA,OAAA,CAAQ,IAAA,CAAK,CAAA,OAAA,EAAU,GAAG,CAAA,CAAA,EAAI,GAAG,YAAY,CAAA;AAAA,MAC/C;AAAA,IACF,CAAA;AAAA,IACA,KAAA,EAAO,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB;AAC1C,MAAA,IAAI,SAAA,CAAU,OAAO,CAAA,EAAG;AACtB,QAAA,MAAM,EAAE,SAAS,GAAA,EAAK,IAAA,EAAM,cAAa,GAAI,aAAA,CAAc,OAAA,EAAS,GAAG,IAAI,CAAA;AAC3E,QAAA,OAAA,CAAQ,KAAA,CAAM,CAAA,QAAA,EAAW,GAAG,CAAA,CAAA,EAAI,GAAG,YAAY,CAAA;AAAA,MACjD;AAAA,IACF;AAAA,GACF;AACF;AAKA,SAASA,oBAAAA,GAA8B;AACrC,EAAA,OAAO;AAAA,IACL,KAAA,EAAO,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,MAAM,CAAA,QAAA,EAAW,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA,IACvF,IAAA,EAAM,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,KAAK,CAAA,OAAA,EAAU,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA,IACpF,IAAA,EAAM,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,KAAK,CAAA,OAAA,EAAU,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA,IACpF,KAAA,EAAO,CAAC,OAAA,EAAA,GAAoB,IAAA,KAAgB,OAAA,CAAQ,MAAM,CAAA,QAAA,EAAW,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI;AAAA,GACzF;AACF","file":"index.mjs","sourcesContent":["import { Client, GatewayIntentBits } from 'discord.js';\r\nimport type { CreateClientOptions, Features, Logger } from '../types/index.js';\r\n\r\n/**\r\n * Maps features to the required Discord gateway intents\r\n */\r\nconst FEATURE_INTENTS: Record<string, GatewayIntentBits[]> = {\r\n  commands: [],\r\n  messages: [GatewayIntentBits.MessageContent, GatewayIntentBits.GuildMessages],\r\n  members: [GatewayIntentBits.GuildMembers],\r\n  reactions: [GatewayIntentBits.GuildMessageReactions],\r\n  voice: [GatewayIntentBits.GuildVoiceStates],\r\n  v2: [], // V2 components don't need special intents\r\n  diagnostics: [GatewayIntentBits.Guilds], // Need basic guild access for diagnostics\r\n};\r\n\r\n/**\r\n * Creates a Discord.js client with automatic intent configuration based on features.\r\n * Reduces foot-guns by automatically setting up the right intents for common use cases.\r\n * \r\n * @param options - Configuration options for the client\r\n * @returns Configured Discord.js Client instance\r\n * \r\n * @example\r\n * ```typescript\r\n * import { createClient } from 'easier-djs';\r\n * \r\n * const client = createClient({ \r\n *   features: ['commands', 'members', 'v2', 'diagnostics'] \r\n * });\r\n * ```\r\n * \r\n * @example\r\n * ```javascript\r\n * const { createClient } = require('easier-djs');\r\n * const client = createClient({ features: ['commands', 'v2'] });\r\n * ```\r\n */\r\nexport function createClient(options: CreateClientOptions = {}): Client {\r\n  const {\r\n    features = ['commands'],\r\n    additionalIntents = [],\r\n    partials = [],\r\n    handleErrors = true,\r\n    logger = createDefaultLogger(),\r\n  } = options;\r\n\r\n  // Calculate required intents based on features\r\n  const intents = new Set<GatewayIntentBits>();\r\n  \r\n  // Always add Guilds intent for basic functionality\r\n  intents.add(GatewayIntentBits.Guilds);\r\n  \r\n  // Add intents based on features\r\n  for (const feature of features) {\r\n    const featureIntents = FEATURE_INTENTS[feature];\r\n    if (featureIntents) {\r\n      featureIntents.forEach(intent => intents.add(intent));\r\n    } else {\r\n      logger.warn(`Unknown feature: ${feature}`);\r\n    }\r\n  }\r\n  \r\n  // Add any additional intents\r\n  additionalIntents.forEach(intent => intents.add(intent));\r\n\r\n  const client = new Client({\r\n    intents: Array.from(intents),\r\n    partials,\r\n  });\r\n\r\n  // Install error handling if requested\r\n  if (handleErrors) {\r\n    installErrorHandling(client, logger);\r\n  }\r\n\r\n  // Add feature tracking for diagnostics\r\n  (client as any).__easierDjsFeatures = features;\r\n  (client as any).__easierDjsLogger = logger;\r\n\r\n  return client;\r\n}\r\n\r\n/**\r\n * Runs comprehensive diagnostics on a Discord client to identify common issues.\r\n * Checks intents, permissions, latency, and configuration problems.\r\n * \r\n * @param client - The Discord.js client to diagnose\r\n * \r\n * @example\r\n * ```typescript\r\n * import { createClient, diagnose } from 'easier-djs';\r\n * \r\n * const client = createClient({ features: ['commands', 'diagnostics'] });\r\n * await diagnose(client); // Prints actionable health checks\r\n * await client.login(process.env.DISCORD_TOKEN);\r\n * ```\r\n * \r\n * @example\r\n * ```javascript\r\n * const { createClient, diagnose } = require('easier-djs');\r\n * const client = createClient({ features: ['commands'] });\r\n * diagnose(client).then(() => client.login(process.env.DISCORD_TOKEN));\r\n * ```\r\n */\r\nexport async function diagnose(client: Client): Promise<void> {\r\n  const logger = (client as any).__easierDjsLogger || createDefaultLogger();\r\n  const features = (client as any).__easierDjsFeatures || [];\r\n  \r\n  logger.info('🔍 Running easier-djs diagnostics...');\r\n  \r\n  // Check if client is ready\r\n  if (!client.isReady()) {\r\n    logger.warn('⚠️  Client is not ready yet. Some checks may be incomplete.');\r\n  }\r\n  \r\n  // Check token\r\n  if (!process.env.DISCORD_TOKEN && !client.token) {\r\n    logger.error('❌ No Discord token found. Set DISCORD_TOKEN environment variable.');\r\n  } else {\r\n    logger.info('✅ Discord token configured');\r\n  }\r\n  \r\n  // Check intents configuration\r\n  checkIntents(client, features, logger);\r\n  \r\n  // Check latency if ready\r\n  if (client.isReady()) {\r\n    const wsLatency = client.ws.ping;\r\n    if (wsLatency < 100) {\r\n      logger.info(`✅ WebSocket latency: ${wsLatency}ms (excellent)`);\r\n    } else if (wsLatency < 300) {\r\n      logger.info(`⚠️  WebSocket latency: ${wsLatency}ms (good)`);\r\n    } else {\r\n      logger.warn(`⚠️  WebSocket latency: ${wsLatency}ms (high - check connection)`);\r\n    }\r\n    \r\n    logger.info(`📊 Bot in ${client.guilds.cache.size} servers`);\r\n  }\r\n  \r\n  // Check Node.js version\r\n  const nodeVersion = process.version;\r\n  const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]!);\r\n  if (majorVersion >= 18) {\r\n    logger.info(`✅ Node.js ${nodeVersion} (supported)`);\r\n  } else {\r\n    logger.error(`❌ Node.js ${nodeVersion} is too old. easier-djs requires Node.js 18.17+`);\r\n  }\r\n  \r\n  logger.info('🎯 Diagnostics complete!');\r\n}\r\n\r\n/**\r\n * Checks if the client has the right intents for the enabled features\r\n */\r\nfunction checkIntents(client: Client, features: Features, logger: Logger): void {\r\n  const requiredIntents = new Set<GatewayIntentBits>();\r\n  \r\n  // Calculate what intents should be enabled\r\n  for (const feature of features) {\r\n    const featureIntents = FEATURE_INTENTS[feature];\r\n    if (featureIntents) {\r\n      featureIntents.forEach(intent => requiredIntents.add(intent));\r\n    }\r\n  }\r\n  \r\n  const clientIntents = client.options.intents;\r\n  const hasMessageContent = Array.isArray(clientIntents) \r\n    ? clientIntents.includes(GatewayIntentBits.MessageContent)\r\n    : clientIntents?.has(GatewayIntentBits.MessageContent);\r\n  \r\n  // Check message content intent specifically\r\n  if (features.includes('messages')) {\r\n    if (hasMessageContent) {\r\n      logger.info('✅ Message Content intent enabled');\r\n    } else {\r\n      logger.error('❌ Message Content intent missing. Required for reading message content.');\r\n      logger.error('   Add it in Discord Developer Portal > Bot > Privileged Gateway Intents');\r\n    }\r\n  }\r\n  \r\n  // Check guild members intent\r\n  if (features.includes('members')) {\r\n    const hasMembers = Array.isArray(clientIntents)\r\n      ? clientIntents.includes(GatewayIntentBits.GuildMembers)\r\n      : clientIntents?.has(GatewayIntentBits.GuildMembers);\r\n    if (hasMembers) {\r\n      logger.info('✅ Guild Members intent enabled');\r\n    } else {\r\n      logger.error('❌ Guild Members intent missing. Required for member-related features.');\r\n      logger.error('   Enable it in Discord Developer Portal > Bot > Privileged Gateway Intents');\r\n    }\r\n  }\r\n  \r\n  logger.info(`📋 Features enabled: ${features.join(', ')}`);\r\n}\r\n\r\n/**\r\n * Installs default error handling for the client\r\n */\r\nfunction installErrorHandling(client: Client, logger: Logger): void {\r\n  // Handle unhandled promise rejections in interactions\r\n  client.on('interactionCreate', async (interaction) => {\r\n    if (!interaction.isRepliable()) return;\r\n    \r\n    // Add error handling wrapper (this would be expanded in a full implementation)\r\n    // For now, just log that error handling is installed\r\n    logger.debug('Error handling installed for interaction');\r\n  });\r\n  \r\n  client.on('error', (error) => {\r\n    logger.error('Discord client error:', error);\r\n  });\r\n  \r\n  client.on('warn', (warning) => {\r\n    logger.warn('Discord client warning:', warning);\r\n  });\r\n}\r\n\r\n/**\r\n * Creates a simple default logger that outputs to console\r\n */\r\nfunction createDefaultLogger(): Logger {\r\n  return {\r\n    debug: (message: string, ...args: any[]) => console.debug(`[DEBUG] ${message}`, ...args),\r\n    info: (message: string, ...args: any[]) => console.info(`[INFO] ${message}`, ...args),\r\n    warn: (message: string, ...args: any[]) => console.warn(`[WARN] ${message}`, ...args),\r\n    error: (message: string, ...args: any[]) => console.error(`[ERROR] ${message}`, ...args),\r\n  };\r\n} ","import { REST, Routes, Client, Message } from 'discord.js';\r\nimport { readdir, stat } from 'fs/promises';\r\nimport { join, extname } from 'path';\r\nimport type { CommandDefinition, PrefixCommandDefinition, Logger } from '../types/index.js';\r\n\r\n/**\r\n * Options for deploying slash commands\r\n */\r\nexport interface DeployOptions {\r\n  /** Deployment scope - guild or global */\r\n  scope?: 'guild' | 'global';\r\n  /** Guild ID (required for guild scope) */\r\n  guildId?: string;\r\n  /** Dry run mode - shows what would be deployed without applying changes */\r\n  dryRun?: boolean;\r\n  /** Ask for confirmation before destructive changes */\r\n  confirm?: boolean;\r\n  /** Logger instance for output */\r\n  logger?: Logger;\r\n}\r\n\r\n/**\r\n * Loads command definitions from a directory or array.\r\n * Automatically imports TypeScript/JavaScript files and extracts command definitions.\r\n * \r\n * @param dirOrArray - Directory path to scan or array of command definitions\r\n * @returns Array of loaded command definitions\r\n * \r\n * @example\r\n * ```typescript\r\n * import { loadCommands } from 'easier-djs';\r\n * \r\n * // Load from directory\r\n * const commands = loadCommands('./commands');\r\n * \r\n * // Load from array\r\n * const commands = loadCommands([\r\n *   {\r\n *     data: new SlashCommandBuilder().setName('ping').setDescription('Ping command'),\r\n *     run: async (interaction) => interaction.reply('Pong!')\r\n *   }\r\n * ]);\r\n * ```\r\n * \r\n * @example\r\n * ```javascript\r\n * const { loadCommands } = require('easier-djs');\r\n * const commands = loadCommands('./commands');\r\n * ```\r\n */\r\nexport function loadCommands(dirOrArray: string | CommandDefinition[]): CommandDefinition[] {\r\n  if (Array.isArray(dirOrArray)) {\r\n    return dirOrArray;\r\n  }\r\n  \r\n  // For directory loading, this would need to be implemented asynchronously\r\n  // For now, return empty array with a note that this needs async implementation\r\n  console.warn('Directory loading not yet implemented. Use array format for now.');\r\n  return [];\r\n}\r\n\r\n/**\r\n * Loads commands from a directory asynchronously.\r\n * Scans for .js, .ts, .mjs files and imports them as command modules.\r\n * \r\n * @param directory - Directory path to scan\r\n * @param logger - Optional logger for debug output\r\n * @returns Promise resolving to array of command definitions\r\n * \r\n * @example\r\n * ```typescript\r\n * import { loadCommandsAsync } from 'easier-djs';\r\n * \r\n * const commands = await loadCommandsAsync('./commands');\r\n * ```\r\n */\r\nexport async function loadCommandsAsync(\r\n  directory: string,\r\n  logger?: Logger\r\n): Promise<CommandDefinition[]> {\r\n  const commands: CommandDefinition[] = [];\r\n  \r\n  try {\r\n    const files = await readdir(directory);\r\n    \r\n    for (const file of files) {\r\n      const filePath = join(directory, file);\r\n      const stats = await stat(filePath);\r\n      \r\n      if (stats.isFile() && ['.js', '.ts', '.mjs'].includes(extname(file))) {\r\n        try {\r\n          logger?.debug(`Loading command from ${file}`);\r\n          \r\n          // Dynamic import (this would need proper path resolution in a real implementation)\r\n          const module = await import(filePath);\r\n          \r\n          // Look for default export or named exports that look like commands\r\n          const possibleCommands = [\r\n            module.default,\r\n            ...Object.values(module).filter((exp: any) => \r\n              exp && typeof exp === 'object' && exp.data && exp.run\r\n            )\r\n          ].filter(Boolean);\r\n          \r\n          commands.push(...possibleCommands as CommandDefinition[]);\r\n        } catch (error) {\r\n          logger?.error(`Failed to load command from ${file}:`, error);\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    logger?.error(`Failed to read commands directory ${directory}:`, error);\r\n  }\r\n  \r\n  return commands;\r\n}\r\n\r\n/**\r\n * Deploys slash commands to Discord with intelligent diffing.\r\n * Shows what will change before applying and handles both guild and global deployment.\r\n * \r\n * @param client - Discord.js client instance\r\n * @param commands - Array of command definitions to deploy\r\n * @param options - Deployment options\r\n * \r\n * @example\r\n * ```typescript\r\n * import { deploy, loadCommands } from 'easier-djs';\r\n * \r\n * const commands = loadCommands('./commands');\r\n * await deploy(client, commands, {\r\n *   scope: process.env.NODE_ENV === 'production' ? 'global' : 'guild',\r\n *   guildId: process.env.DEV_GUILD_ID,\r\n *   confirm: true,\r\n * });\r\n * ```\r\n * \r\n * @example\r\n * ```javascript\r\n * const { deploy, loadCommands } = require('easier-djs');\r\n * \r\n * const commands = loadCommands([myCommand]);\r\n * await deploy(client, commands, { scope: 'guild', guildId: '123456789' });\r\n * ```\r\n */\r\nexport async function deploy(\r\n  client: Client,\r\n  commands: CommandDefinition[],\r\n  options: DeployOptions = {}\r\n): Promise<void> {\r\n  const {\r\n    scope = 'guild',\r\n    guildId,\r\n    dryRun = false,\r\n    confirm = false,\r\n    logger = createDefaultLogger()\r\n  } = options;\r\n\r\n  if (!client.token) {\r\n    throw new Error('Client must be logged in with a token to deploy commands');\r\n  }\r\n\r\n  if (scope === 'guild' && !guildId) {\r\n    throw new Error('Guild ID is required for guild-scoped command deployment');\r\n  }\r\n\r\n  const rest = new REST({ version: '10' }).setToken(client.token);\r\n  const clientId = client.user?.id || client.application?.id;\r\n  \r\n  if (!clientId) {\r\n    throw new Error('Unable to determine client ID. Make sure the client is ready.');\r\n  }\r\n\r\n  // Prepare command data for deployment\r\n  const commandData = commands.map(cmd => cmd.data.toJSON());\r\n  \r\n  logger.info(`🚀 Deploying ${commandData.length} command(s) to ${scope}${scope === 'guild' ? ` (${guildId})` : ''}`);\r\n  \r\n  try {\r\n    // Determine the correct route\r\n    const route = scope === 'guild' \r\n      ? Routes.applicationGuildCommands(clientId, guildId!)\r\n      : Routes.applicationCommands(clientId);\r\n\r\n    // Get existing commands for comparison\r\n    const existingCommands = await rest.get(route) as any[];\r\n    \r\n    // Show diff\r\n    showCommandDiff(existingCommands, commandData, logger);\r\n    \r\n    if (dryRun) {\r\n      logger.info('🔍 Dry run mode - no changes applied');\r\n      return;\r\n    }\r\n    \r\n    if (confirm) {\r\n      // In a real implementation, this would prompt for user confirmation\r\n      logger.info('⚠️  Confirmation required - proceeding with deployment');\r\n    }\r\n    \r\n    // Deploy commands\r\n    const deployedCommands = await rest.put(route, { body: commandData }) as any[];\r\n    \r\n    logger.info(`✅ Successfully deployed ${deployedCommands.length} command(s)!`);\r\n    \r\n    if (scope === 'global') {\r\n      logger.warn('⏰ Global commands may take up to 1 hour to propagate across all servers');\r\n    }\r\n    \r\n  } catch (error) {\r\n    logger.error('❌ Failed to deploy commands:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Shows a diff between existing and new commands\r\n */\r\nfunction showCommandDiff(existing: any[], newCommands: any[], logger: Logger): void {\r\n  const existingMap = new Map(existing.map(cmd => [cmd.name, cmd]));\r\n  const newMap = new Map(newCommands.map(cmd => [cmd.name, cmd]));\r\n  \r\n  const toAdd = newCommands.filter(cmd => !existingMap.has(cmd.name));\r\n  const toUpdate = newCommands.filter(cmd => {\r\n    const existingCmd = existingMap.get(cmd.name);\r\n    return existingCmd && !commandsEqual(existingCmd, cmd);\r\n  });\r\n  const toRemove = existing.filter(cmd => !newMap.has(cmd.name));\r\n  \r\n  if (toAdd.length === 0 && toUpdate.length === 0 && toRemove.length === 0) {\r\n    logger.info('📋 No changes detected - commands are up to date');\r\n    return;\r\n  }\r\n  \r\n  logger.info('📋 Command deployment summary:');\r\n  \r\n  if (toAdd.length > 0) {\r\n    logger.info(`  ➕ Adding ${toAdd.length} command(s):`);\r\n    toAdd.forEach(cmd => logger.info(`     - ${cmd.name}: ${cmd.description}`));\r\n  }\r\n  \r\n  if (toUpdate.length > 0) {\r\n    logger.info(`  📝 Updating ${toUpdate.length} command(s):`);\r\n    toUpdate.forEach(cmd => logger.info(`     - ${cmd.name}: ${cmd.description}`));\r\n  }\r\n  \r\n  if (toRemove.length > 0) {\r\n    logger.info(`  ❌ Removing ${toRemove.length} command(s):`);\r\n    toRemove.forEach(cmd => logger.info(`     - ${cmd.name}: ${cmd.description}`));\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two command objects for equality (simplified)\r\n */\r\nfunction commandsEqual(cmd1: any, cmd2: any): boolean {\r\n  return (\r\n    cmd1.name === cmd2.name &&\r\n    cmd1.description === cmd2.description &&\r\n    JSON.stringify(cmd1.options || []) === JSON.stringify(cmd2.options || [])\r\n  );\r\n}\r\n\r\n/**\r\n * Creates a simple logger for command deployment\r\n */\r\nfunction createDefaultLogger() {\r\n  return {\r\n    debug: (message: string, ...args: any[]) => console.debug(`[DEBUG] ${message}`, ...args),\r\n    info: (message: string, ...args: any[]) => console.info(`[INFO] ${message}`, ...args),\r\n    warn: (message: string, ...args: any[]) => console.warn(`[WARN] ${message}`, ...args),\r\n    error: (message: string, ...args: any[]) => console.error(`[ERROR] ${message}`, ...args),\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a simple command handler that can be attached to the interactionCreate event.\r\n * Handles command lookup, guard checking, and error handling.\r\n * \r\n * @param commands - Array of command definitions\r\n * @param logger - Optional logger instance\r\n * @returns Event handler function\r\n * \r\n * @example\r\n * ```typescript\r\n * import { createCommandHandler } from 'easier-djs';\r\n * \r\n * const commands = loadCommands('./commands');\r\n * const handler = createCommandHandler(commands);\r\n * \r\n * client.on('interactionCreate', handler);\r\n * ```\r\n */\r\nexport function createCommandHandler(commands: CommandDefinition[], logger?: Logger) {\r\n  const commandMap = new Map(commands.map(cmd => [cmd.data.name, cmd]));\r\n  \r\n  return async (interaction: any) => {\r\n    if (!interaction.isChatInputCommand()) return;\r\n    \r\n    const command = commandMap.get(interaction.commandName);\r\n    if (!command) return;\r\n    \r\n    const context = { client: interaction.client, logger: logger || createDefaultLogger() };\r\n    \r\n    try {\r\n      // Run guard if present\r\n      if (command.guard) {\r\n        const guardResult = await command.guard(interaction, context);\r\n        if (guardResult !== true) {\r\n          const errorMessage = typeof guardResult === 'string' \r\n            ? guardResult \r\n            : 'Access denied';\r\n          \r\n          await interaction.reply({ \r\n            content: errorMessage, \r\n            ephemeral: true \r\n          });\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Run the command\r\n      await command.run(interaction, context);\r\n      \r\n    } catch (error) {\r\n      context.logger.error(`Error in command ${interaction.commandName}:`, error);\r\n      \r\n      const errorMessage = 'An error occurred while executing this command.';\r\n      \r\n      if (interaction.replied || interaction.deferred) {\r\n        await interaction.editReply(errorMessage);\r\n      } else {\r\n        await interaction.reply({ content: errorMessage, ephemeral: true });\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a prefix command handler for message events.\r\n * Handles command parsing, guard checking, and error handling.\r\n * \r\n * @param prefixCommands - Array of prefix command definitions\r\n * @param prefix - Command prefix (default: '!')\r\n * @param logger - Optional logger instance\r\n * @returns Event handler function\r\n * \r\n * @example\r\n * ```typescript\r\n * import { createPrefixCommandHandler } from 'easier-djs';\r\n * \r\n * const prefixCommands = [\r\n *   {\r\n *     name: 'ping',\r\n *     description: 'Ping command',\r\n *     run: async (message, args, ctx) => {\r\n *       await message.reply('Pong!');\r\n *     }\r\n *   }\r\n * ];\r\n * \r\n * const handler = createPrefixCommandHandler(prefixCommands, '!');\r\n * client.on('messageCreate', handler);\r\n * ```\r\n */\r\nexport function createPrefixCommandHandler(\r\n  prefixCommands: PrefixCommandDefinition[], \r\n  prefix: string = '!',\r\n  logger?: Logger\r\n) {\r\n  const commandMap = new Map<string, PrefixCommandDefinition>();\r\n  \r\n  // Build command map with aliases\r\n  for (const cmd of prefixCommands) {\r\n    commandMap.set(cmd.name, cmd);\r\n    if (cmd.aliases) {\r\n      for (const alias of cmd.aliases) {\r\n        commandMap.set(alias, cmd);\r\n      }\r\n    }\r\n  }\r\n  \r\n  return async (message: Message) => {\r\n    // Ignore bot messages and messages that don't start with prefix\r\n    if (message.author.bot || !message.content.startsWith(prefix)) return;\r\n    \r\n    // Parse command and arguments\r\n    const args = message.content.slice(prefix.length).trim().split(/ +/);\r\n    const commandName = args.shift()?.toLowerCase();\r\n    \r\n    if (!commandName) return;\r\n    \r\n    const command = commandMap.get(commandName);\r\n    if (!command) return;\r\n    \r\n    const context = { client: message.client, logger: logger || createDefaultLogger() };\r\n    \r\n    try {\r\n      // Run guard if present\r\n      if (command.guard) {\r\n        const guardResult = await command.guard(message, args, context);\r\n        if (guardResult !== true) {\r\n          const errorMessage = typeof guardResult === 'string' \r\n            ? guardResult \r\n            : 'Access denied';\r\n          \r\n          await message.reply(errorMessage);\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Run the command\r\n      await command.run(message, args, context);\r\n      \r\n    } catch (error) {\r\n      context.logger.error(`Error in prefix command ${commandName}:`, error);\r\n      await message.reply('An error occurred while executing this command.');\r\n    }\r\n  };\r\n} ","import { \r\n  ActionRowBuilder, \r\n  ButtonBuilder, \r\n  ButtonStyle, \r\n  MessageFlags,\r\n  ComponentType,\r\n  APIMessageComponent\r\n} from 'discord.js';\r\n\r\nexport type Markdownish = string;\r\n\r\ninterface CardComponents {\r\n  components: ActionRowBuilder<any>[];\r\n  flags: MessageFlags;\r\n}\r\n\r\n/**\r\n * V2 Card Builder - Creates Discord V2 components with automatic flag handling.\r\n * Eliminates the verbosity of V2 components and automatically sets the required flag.\r\n */\r\nexport interface CardBuilder {\r\n  /**\r\n   * Set the embed color (hex value)\r\n   * @param hex - Color in hex format (e.g., 0x5865f2)\r\n   */\r\n  color(hex: number): this;\r\n  \r\n  /**\r\n   * Add a text section with markdown support\r\n   * @param md - Markdown text content\r\n   */\r\n  section(md: Markdownish): this;\r\n  \r\n  /**\r\n   * Set thumbnail image URL\r\n   * @param url - Image URL for thumbnail\r\n   */\r\n  thumb(url: string): this;\r\n  \r\n  /**\r\n   * Add an image (compiles to MediaGallery in V2)\r\n   * @param url - Image URL\r\n   */\r\n  image(url: string): this;\r\n  \r\n  /**\r\n   * Set footer text with markdown support\r\n   * @param md - Footer text with markdown\r\n   */\r\n  footer(md: Markdownish): this;\r\n  \r\n  /**\r\n   * Convert to Discord API component structure\r\n   */\r\n  toComponent(): APIMessageComponent;\r\n  \r\n  /**\r\n   * Add action rows and return components with proper V2 flags\r\n   * @param rows - Action rows to add to the card\r\n   */\r\n  withActions(...rows: ActionRowBuilder<any>[]): CardComponents;\r\n}\r\n\r\n/**\r\n * Creates a new V2 card builder with fluent API.\r\n * Automatically handles V2 component structure and flags.\r\n * \r\n * @returns CardBuilder instance for method chaining\r\n * \r\n * @example\r\n * ```typescript\r\n * import { card, btn } from 'easier-djs';\r\n * \r\n * const ui = card()\r\n *   .color(0x5865f2)\r\n *   .section(\"**Server Info**\\nSome text.\")\r\n *   .thumb(\"https://cdn.discordapp.com/embed/avatars/0.png\")\r\n *   .footer(\"_Requested by you_\")\r\n *   .withActions(\r\n *     new ActionRowBuilder().addComponents(\r\n *       btn.primary(\"refresh\", \"Refresh\")\r\n *     )\r\n *   );\r\n * \r\n * await interaction.reply(ui); // Automatically sets MessageFlags.IsComponentsV2\r\n * ```\r\n * \r\n * @example\r\n * ```javascript\r\n * const { card, btn } = require('easier-djs');\r\n * const ui = card().section(\"hello\").withActions(\r\n *   new ActionRowBuilder().addComponents(btn.link(\"https://x.y\", \"Open\"))\r\n * );\r\n * await interaction.reply(ui);\r\n * ```\r\n */\r\nexport function card(): CardBuilder {\r\n  return new CardBuilderImpl();\r\n}\r\n\r\nclass CardBuilderImpl implements CardBuilder {\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private _color?: number;\r\n  private _sections: string[] = [];\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private _thumbUrl?: string;\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private _imageUrl?: string;\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private _footerText?: string;\r\n\r\n  color(hex: number): this {\r\n    this._color = hex;\r\n    return this;\r\n  }\r\n\r\n  section(md: Markdownish): this {\r\n    this._sections.push(md);\r\n    return this;\r\n  }\r\n\r\n  thumb(url: string): this {\r\n    this._thumbUrl = url;\r\n    return this;\r\n  }\r\n\r\n  image(url: string): this {\r\n    this._imageUrl = url;\r\n    return this;\r\n  }\r\n\r\n  footer(md: Markdownish): this {\r\n    this._footerText = md;\r\n    return this;\r\n  }\r\n\r\n  toComponent(): APIMessageComponent {\r\n    // This is a simplified implementation\r\n    // In a full implementation, this would build proper V2 component structures\r\n    // For now, we return a basic structure to demonstrate the API\r\n    return {\r\n      type: ComponentType.ActionRow,\r\n      components: []\r\n    };\r\n  }\r\n\r\n  withActions(...rows: ActionRowBuilder<any>[]): CardComponents {\r\n    // In a real implementation, this would properly build V2 container structures\r\n    // For now, we'll return the action rows with the V2 flag\r\n    return {\r\n      components: rows,\r\n      flags: MessageFlags.IsComponentsV2\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Button helper namespace for creating common button types.\r\n * Provides shortcuts for primary, secondary, danger, and link buttons.\r\n */\r\nexport const btn = {\r\n  /**\r\n   * Create a primary (blurple) button\r\n   * @param id - Custom ID for the button\r\n   * @param label - Button label text\r\n   * @returns ButtonBuilder configured as primary style\r\n   */\r\n  primary(id: string, label: string): ButtonBuilder {\r\n    return new ButtonBuilder()\r\n      .setCustomId(id)\r\n      .setLabel(label)\r\n      .setStyle(ButtonStyle.Primary);\r\n  },\r\n\r\n  /**\r\n   * Create a secondary (grey) button\r\n   * @param id - Custom ID for the button\r\n   * @param label - Button label text\r\n   * @returns ButtonBuilder configured as secondary style\r\n   */\r\n  secondary(id: string, label: string): ButtonBuilder {\r\n    return new ButtonBuilder()\r\n      .setCustomId(id)\r\n      .setLabel(label)\r\n      .setStyle(ButtonStyle.Secondary);\r\n  },\r\n\r\n  /**\r\n   * Create a danger (red) button\r\n   * @param id - Custom ID for the button\r\n   * @param label - Button label text\r\n   * @returns ButtonBuilder configured as danger style\r\n   */\r\n  danger(id: string, label: string): ButtonBuilder {\r\n    return new ButtonBuilder()\r\n      .setCustomId(id)\r\n      .setLabel(label)\r\n      .setStyle(ButtonStyle.Danger);\r\n  },\r\n\r\n  /**\r\n   * Create a link button (opens URL)\r\n   * @param url - URL to open when clicked\r\n   * @param label - Button label text\r\n   * @returns ButtonBuilder configured as link style\r\n   */\r\n  link(url: string, label: string): ButtonBuilder {\r\n    return new ButtonBuilder()\r\n      .setURL(url)\r\n      .setLabel(label)\r\n      .setStyle(ButtonStyle.Link);\r\n  }\r\n};\r\n\r\n/**\r\n * Migration helper to convert existing EmbedBuilder to V2 card format\r\n * @param embed - Discord.js EmbedBuilder to convert\r\n * @returns CardBuilder with equivalent content\r\n * \r\n * @example\r\n * ```typescript\r\n * import { EmbedBuilder } from 'discord.js';\r\n * import { convertEmbed } from 'easier-djs';\r\n * \r\n * const oldEmbed = new EmbedBuilder()\r\n *   .setTitle('Title')\r\n *   .setDescription('Description');\r\n * \r\n * const newCard = convertEmbed(oldEmbed);\r\n * ```\r\n */\r\nexport function convertEmbed(embed: any): CardBuilder {\r\n  const builder = card();\r\n  \r\n  // Convert embed properties to card format\r\n  if (embed.data?.color) {\r\n    builder.color(embed.data.color);\r\n  }\r\n  \r\n  if (embed.data?.description) {\r\n    builder.section(embed.data.description);\r\n  }\r\n  \r\n  if (embed.data?.thumbnail?.url) {\r\n    builder.thumb(embed.data.thumbnail.url);\r\n  }\r\n  \r\n  if (embed.data?.image?.url) {\r\n    builder.image(embed.data.image.url);\r\n  }\r\n  \r\n  if (embed.data?.footer?.text) {\r\n    builder.footer(embed.data.footer.text);\r\n  }\r\n  \r\n  return builder;\r\n} ","import { \r\n  ActionRowBuilder, \r\n  ButtonBuilder, \r\n  ButtonStyle, \r\n  ComponentType,\r\n  MessageComponentInteraction,\r\n  Message,\r\n  MessageFlags,\r\n  InteractionResponse,\r\n  ChatInputCommandInteraction,\r\n  ButtonInteraction,\r\n  StringSelectMenuInteraction,\r\n  ModalSubmitInteraction,\r\n  ModalBuilder,\r\n  TextInputBuilder,\r\n  TextInputStyle\r\n} from 'discord.js';\r\nimport type { Interaction } from 'discord.js';\r\nimport { card, btn } from '../v2/index.js';\r\nimport type { CardBuilder } from '../v2/index.js';\r\n\r\n/**\r\n * Configuration options for confirm dialogs\r\n */\r\nexport interface ConfirmOptions {\r\n  /** Custom ID for the yes button */\r\n  yesId?: string;\r\n  /** Custom ID for the no button */\r\n  noId?: string;\r\n  /** Timeout in milliseconds (default: 30000) */\r\n  timeoutMs?: number;\r\n  /** Whether the response should be ephemeral */\r\n  ephemeral?: boolean;\r\n  /** Custom UI builder function */\r\n  ui?: (base: ReturnType<typeof card>) => ReturnType<typeof card>;\r\n}\r\n\r\n/**\r\n * Configuration options for pagination\r\n */\r\nexport interface PaginateOptions {\r\n  /** Items per page (default: 10) */\r\n  perPage?: number;\r\n  /** Timeout in milliseconds (default: 300000 / 5 minutes) */\r\n  timeoutMs?: number;\r\n  /** Whether the response should be ephemeral */\r\n  ephemeral?: boolean;\r\n  /** Custom render function for each page */\r\n  render?: (items: string[], page: number, totalPages: number) => ReturnType<typeof card>;\r\n}\r\n\r\n/**\r\n * Configuration options for component collectors\r\n */\r\nexport interface CollectOptions {\r\n  /** Filter function for interactions */\r\n  filter?: (i: MessageComponentInteraction) => boolean;\r\n  /** Collection timeout in milliseconds */\r\n  time?: number;\r\n  /** Maximum interactions to collect */\r\n  max?: number;\r\n}\r\n\r\n/**\r\n * Shows a confirmation dialog with Yes/No buttons.\r\n * Handles timeout gracefully and provides clear user feedback.\r\n * \r\n * @param interaction - The interaction to respond to\r\n * @param text - The confirmation message text\r\n * @param options - Configuration options\r\n * @returns Promise resolving to true if confirmed, false if denied or timed out\r\n * \r\n * @example\r\n * ```typescript\r\n * import { confirm } from 'easier-djs';\r\n * \r\n * if (await confirm(interaction, \"Delete this channel?\")) {\r\n *   // User confirmed, proceed with deletion\r\n *   await interaction.channel?.delete();\r\n * }\r\n * ```\r\n * \r\n * @example\r\n * ```javascript\r\n * const { confirm } = require('easier-djs');\r\n * \r\n * const confirmed = await confirm(interaction, \"Are you sure?\", {\r\n *   ephemeral: true,\r\n *   timeoutMs: 15000\r\n * });\r\n * ```\r\n */\r\nexport async function confirm(\r\n  interaction: ChatInputCommandInteraction | ButtonInteraction,\r\n  text: string,\r\n  options: ConfirmOptions = {}\r\n): Promise<boolean> {\r\n  const {\r\n    yesId = 'confirm_yes',\r\n    noId = 'confirm_no',\r\n    timeoutMs = 30000,\r\n    ephemeral = false,\r\n    ui = (base) => base\r\n  } = options;\r\n\r\n  // Build the confirmation UI\r\n  const baseCard = card().section(`⚠️ **Confirmation Required**\\n\\n${text}`);\r\n  const confirmCard = ui(baseCard);\r\n  \r\n  const actionRow = new ActionRowBuilder<ButtonBuilder>().addComponents(\r\n    btn.danger(yesId, 'Yes'),\r\n    btn.secondary(noId, 'No')\r\n  );\r\n\r\n  const response = confirmCard.withActions(actionRow);\r\n  const flags = response.flags | (ephemeral ? MessageFlags.Ephemeral : 0);\r\n\r\n  // Send the confirmation message\r\n  let message: Message;\r\n  if (interaction.replied || interaction.deferred) {\r\n    const reply = await interaction.editReply({ components: response.components, flags });\r\n    message = reply as Message;\r\n  } else {\r\n    const reply = await interaction.reply({ components: response.components, flags, fetchReply: true });\r\n    message = reply as Message;\r\n  }\r\n\r\n  try {\r\n    // Wait for user response\r\n    const buttonInteraction = await message.awaitMessageComponent({\r\n      filter: (i: MessageComponentInteraction) => [yesId, noId].includes(i.customId) && i.user.id === interaction.user.id,\r\n      time: timeoutMs,\r\n      componentType: ComponentType.Button\r\n    });\r\n\r\n    const confirmed = buttonInteraction.customId === yesId;\r\n    \r\n    // Update the message to show the result\r\n    const resultCard = card().section(\r\n      confirmed \r\n        ? '✅ **Confirmed**\\nAction will proceed.'\r\n        : '❌ **Cancelled**\\nNo action taken.'\r\n    );\r\n\r\n    const resultResponse = resultCard.withActions();\r\n    await buttonInteraction.update({ components: resultResponse.components });\r\n    \r\n    return confirmed;\r\n  } catch (error) {\r\n    // Timeout occurred\r\n    const timeoutCard = card().section('⏰ **Timed out**\\nNo response received.');\r\n    \r\n    try {\r\n      const timeoutResponse = timeoutCard.withActions();\r\n      await interaction.editReply({ components: timeoutResponse.components });\r\n    } catch {\r\n      // Ignore edit errors (interaction might be expired)\r\n    }\r\n    \r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a paginated interface for large lists of items.\r\n * Automatically handles navigation and provides a clean interface.\r\n * \r\n * @param interaction - The interaction to respond to\r\n * @param items - Array of items to paginate\r\n * @param options - Configuration options\r\n * \r\n * @example\r\n * ```typescript\r\n * import { paginate } from 'easier-djs';\r\n * \r\n * const userList = guild.members.cache.map(m => m.user.tag);\r\n * await paginate(interaction, userList, { \r\n *   perPage: 10,\r\n *   ephemeral: true \r\n * });\r\n * ```\r\n * \r\n * @example\r\n * ```javascript\r\n * const { paginate } = require('easier-djs');\r\n * \r\n * await paginate(interaction, items, {\r\n *   perPage: 5,\r\n *   render: (items, page) => card().section(`Page ${page}\\n${items.join('\\n')}`)\r\n * });\r\n * ```\r\n */\r\nexport async function paginate(\r\n  interaction: ChatInputCommandInteraction | ButtonInteraction,\r\n  items: string[],\r\n  options: PaginateOptions = {}\r\n): Promise<void> {\r\n  const {\r\n    perPage = 10,\r\n    timeoutMs = 300000, // 5 minutes\r\n    ephemeral = false,\r\n    render = defaultPaginateRender\r\n  } = options;\r\n\r\n  if (items.length === 0) {\r\n    const emptyCard = card().section('📭 **No items to display**');\r\n    const response = emptyCard.withActions();\r\n    response.flags = response.flags | (ephemeral ? MessageFlags.Ephemeral : 0);\r\n    \r\n    const responseData = response;\r\n    await interaction.reply({ components: responseData.components, flags: responseData.flags as any });\r\n    return;\r\n  }\r\n\r\n  const totalPages = Math.ceil(items.length / perPage);\r\n  let currentPage = 0;\r\n\r\n  const updatePage = async (pageIndex: number, targetInteraction: any) => {\r\n    const startIndex = pageIndex * perPage;\r\n    const endIndex = Math.min(startIndex + perPage, items.length);\r\n    const pageItems = items.slice(startIndex, endIndex);\r\n    \r\n    const pageCard = render(pageItems, pageIndex + 1, totalPages);\r\n    \r\n    const actionRow = new ActionRowBuilder<ButtonBuilder>();\r\n    \r\n    // Add navigation buttons\r\n    if (totalPages > 1) {\r\n      actionRow.addComponents(\r\n        btn.secondary('page_first', '⏮️').setDisabled(pageIndex === 0),\r\n        btn.secondary('page_prev', '⬅️').setDisabled(pageIndex === 0),\r\n        btn.secondary('page_next', '➡️').setDisabled(pageIndex === totalPages - 1),\r\n        btn.secondary('page_last', '⏭️').setDisabled(pageIndex === totalPages - 1)\r\n      );\r\n    }\r\n    \r\n    const response = pageCard.withActions(actionRow);\r\n    response.flags = response.flags | (ephemeral ? MessageFlags.Ephemeral : 0);\r\n    \r\n    return await targetInteraction.update ? \r\n      targetInteraction.update(response) : \r\n      targetInteraction.reply({ ...response, fetchReply: true });\r\n  };\r\n\r\n  // Send initial page\r\n  let message: Message;\r\n  if (interaction.replied || interaction.deferred) {\r\n    message = await updatePage(currentPage, { update: interaction.editReply.bind(interaction) });\r\n  } else {\r\n    message = await updatePage(currentPage, interaction) as Message;\r\n  }\r\n\r\n  if (totalPages <= 1) return; // No pagination needed\r\n\r\n  // Handle navigation\r\n  const collector = message.createMessageComponentCollector({\r\n    filter: (i: MessageComponentInteraction) => i.user.id === interaction.user.id,\r\n    time: timeoutMs,\r\n    componentType: ComponentType.Button\r\n  });\r\n\r\n  collector.on('collect', async (buttonInteraction: MessageComponentInteraction) => {\r\n    switch (buttonInteraction.customId) {\r\n      case 'page_first':\r\n        currentPage = 0;\r\n        break;\r\n      case 'page_prev':\r\n        currentPage = Math.max(0, currentPage - 1);\r\n        break;\r\n      case 'page_next':\r\n        currentPage = Math.min(totalPages - 1, currentPage + 1);\r\n        break;\r\n      case 'page_last':\r\n        currentPage = totalPages - 1;\r\n        break;\r\n    }\r\n    \r\n    await updatePage(currentPage, buttonInteraction);\r\n  });\r\n\r\n  collector.on('end', async () => {\r\n    // Disable all buttons on timeout\r\n    try {\r\n      const timeoutCard = render(\r\n        items.slice(currentPage * perPage, Math.min((currentPage + 1) * perPage, items.length)),\r\n        currentPage + 1,\r\n        totalPages\r\n      );\r\n      \r\n             const timeoutResponse = timeoutCard.withActions();\r\n       await interaction.editReply({ components: timeoutResponse.components });\r\n    } catch {\r\n      // Ignore edit errors\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Collects button interactions from a message for a specified time.\r\n * \r\n * @param message - The message to collect interactions from\r\n * @param options - Collection options\r\n * @returns Promise resolving to array of collected interactions\r\n * \r\n * @example\r\n * ```typescript\r\n * import { collectButtons } from 'easier-djs';\r\n * \r\n * const interactions = await collectButtons(message, {\r\n *   filter: (i) => i.user.id === interaction.user.id,\r\n *   time: 60000,\r\n *   max: 1\r\n * });\r\n * ```\r\n */\r\nexport async function collectButtons(\r\n  message: Message,\r\n  options: CollectOptions = {}\r\n): Promise<MessageComponentInteraction[]> {\r\n  const {\r\n    filter = () => true,\r\n    time = 30000,\r\n    max = 1\r\n  } = options;\r\n\r\n  return new Promise((resolve) => {\r\n    const collected: MessageComponentInteraction[] = [];\r\n    \r\n    const collector = message.createMessageComponentCollector({\r\n      filter,\r\n      time,\r\n      max,\r\n      componentType: ComponentType.Button\r\n    });\r\n\r\n    collector.on('collect', (interaction: MessageComponentInteraction) => {\r\n      collected.push(interaction);\r\n    });\r\n\r\n    collector.on('end', () => {\r\n      resolve(collected);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Default render function for pagination\r\n */\r\nfunction defaultPaginateRender(items: string[], page: number, totalPages: number): ReturnType<typeof card> {\r\n  const content = items.join('\\n') || 'No items on this page';\r\n  return card()\r\n    .section(`📄 **Page ${page} of ${totalPages}**\\n\\n${content}`)\r\n    .footer(`${items.length} items on this page`);\r\n}\r\n\r\n/**\r\n * Field definition for modal forms\r\n */\r\nexport interface ModalField {\r\n  /** Unique identifier for the field */\r\n  id: string;\r\n  /** Display label for the field */\r\n  label: string;\r\n  /** Input style - short or paragraph */\r\n  style?: 'short' | 'paragraph';\r\n  /** Whether the field is required */\r\n  required?: boolean;\r\n  /** Maximum character length */\r\n  maxLength?: number;\r\n  /** Placeholder text */\r\n  placeholder?: string;\r\n  /** Default value */\r\n  value?: string;\r\n}\r\n\r\n/**\r\n * Creates a modal builder with predefined fields.\r\n * Simplifies modal creation with a schema-first approach.\r\n * \r\n * @param id - Modal custom ID\r\n * @param title - Modal title\r\n * @param fields - Array of field definitions\r\n * @returns ModalBuilder instance\r\n * \r\n * @example\r\n * ```typescript\r\n * import { modal } from 'easier-djs';\r\n * \r\n * const form = modal('report', 'Report User', [\r\n *   { id: 'user', label: 'User ID', required: true },\r\n *   { id: 'reason', label: 'Reason', style: 'paragraph', maxLength: 1000 }\r\n * ]);\r\n * \r\n * await interaction.showModal(form);\r\n * ```\r\n */\r\nexport function modal(id: string, title: string, fields: ModalField[]): ModalBuilder {\r\n  const modal = new ModalBuilder()\r\n    .setCustomId(id)\r\n    .setTitle(title);\r\n\r\n  const actionRows: ActionRowBuilder<TextInputBuilder>[] = [];\r\n\r\n  for (const field of fields) {\r\n    const input = new TextInputBuilder()\r\n      .setCustomId(field.id)\r\n      .setLabel(field.label)\r\n      .setStyle(field.style === 'paragraph' ? TextInputStyle.Paragraph : TextInputStyle.Short)\r\n      .setRequired(field.required ?? false);\r\n\r\n    if (field.maxLength) {\r\n      input.setMaxLength(field.maxLength);\r\n    }\r\n\r\n    if (field.placeholder) {\r\n      input.setPlaceholder(field.placeholder);\r\n    }\r\n\r\n    if (field.value) {\r\n      input.setValue(field.value);\r\n    }\r\n\r\n    const actionRow = new ActionRowBuilder<TextInputBuilder>().addComponents(input);\r\n    actionRows.push(actionRow);\r\n  }\r\n\r\n  return modal.addComponents(actionRows);\r\n}\r\n\r\n/**\r\n * Waits for a modal submission and returns parsed data.\r\n * Handles timeout and provides type-safe field access.\r\n * \r\n * @param interaction - Command interaction to show modal on\r\n * @param modal - Modal builder to show\r\n * @param timeoutMs - Timeout in milliseconds (default: 300000 / 5 minutes)\r\n * @returns Promise resolving to parsed modal data\r\n * \r\n * @example\r\n * ```typescript\r\n * import { modal, awaitModal } from 'easier-djs';\r\n * \r\n * const form = modal('report', 'Report User', [\r\n *   { id: 'user', label: 'User ID', required: true },\r\n *   { id: 'reason', label: 'Reason', style: 'paragraph' }\r\n * ]);\r\n * \r\n * const data = await awaitModal(interaction, form);\r\n * await interaction.followUp(`Reported ${data.user} for: ${data.reason}`);\r\n * ```\r\n */\r\nexport async function awaitModal(\r\n  interaction: ChatInputCommandInteraction,\r\n  modal: ModalBuilder,\r\n  timeoutMs: number = 300000\r\n): Promise<Record<string, string>> {\r\n  await interaction.showModal(modal);\r\n\r\n  try {\r\n    const modalInteraction = await interaction.awaitModalSubmit({\r\n      filter: (i) => i.customId === modal.data.custom_id && i.user.id === interaction.user.id,\r\n      time: timeoutMs\r\n    });\r\n\r\n    const data: Record<string, string> = {};\r\n    \r\n    for (const component of modalInteraction.components) {\r\n      if (component.components[0]?.type === ComponentType.TextInput) {\r\n        const input = component.components[0];\r\n        data[input.customId] = input.value;\r\n      }\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw new Error('Modal submission timed out or was cancelled');\r\n  }\r\n} ","import { REST, RESTPostAPIChannelMessageJSONBody, RESTPatchAPIChannelMessageJSONBody } from 'discord.js';\r\nimport type { Logger } from '../types/index.js';\r\n\r\nexport interface RestOptions {\r\n  maxRetries?: number;\r\n  baseDelayMs?: number;\r\n  logger?: Logger;\r\n}\r\n\r\n/**\r\n * Wraps a REST instance with rate limiting and retry logic.\r\n * Provides exponential backoff with jitter for failed requests.\r\n * \r\n * @param rest - Discord.js REST instance\r\n * @param options - Configuration options\r\n * @returns Enhanced REST instance with retry logic\r\n * \r\n * @example\r\n * ```typescript\r\n * import { REST } from 'discord.js';\r\n * import { wrapRest } from 'easier-djs';\r\n * \r\n * const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN!);\r\n * const enhancedRest = wrapRest(rest, { maxRetries: 3, baseDelayMs: 1000 });\r\n * ```\r\n */\r\nexport function wrapRest(rest: REST, options: RestOptions = {}): REST {\r\n  const {\r\n    maxRetries = 3,\r\n    baseDelayMs = 1000,\r\n    logger = createDefaultLogger()\r\n  } = options;\r\n\r\n  // Store original methods\r\n  const originalPost = rest.post.bind(rest);\r\n  const originalPatch = rest.patch.bind(rest);\r\n  const originalDelete = rest.delete.bind(rest);\r\n\r\n  // Enhanced POST with retry logic\r\n  rest.post = async (route: any, options?: any) => {\r\n    return await retryWithBackoff(\r\n      () => originalPost(route, options),\r\n      maxRetries,\r\n      baseDelayMs,\r\n      logger,\r\n      'POST'\r\n    );\r\n  };\r\n\r\n  // Enhanced PATCH with retry logic\r\n  rest.patch = async (route: any, options?: any) => {\r\n    return await retryWithBackoff(\r\n      () => originalPatch(route, options),\r\n      maxRetries,\r\n      baseDelayMs,\r\n      logger,\r\n      'PATCH'\r\n    );\r\n  };\r\n\r\n  // Enhanced DELETE with retry logic\r\n  rest.delete = async (route: any, options?: any) => {\r\n    return await retryWithBackoff(\r\n      () => originalDelete(route, options),\r\n      maxRetries,\r\n      baseDelayMs,\r\n      logger,\r\n      'DELETE'\r\n    );\r\n  };\r\n\r\n  return rest;\r\n}\r\n\r\n/**\r\n * Retry function with exponential backoff and jitter\r\n */\r\nasync function retryWithBackoff(\r\n  fn: () => Promise<any>,\r\n  maxRetries: number,\r\n  baseDelayMs: number,\r\n  logger: Logger,\r\n  method: string\r\n): Promise<any> {\r\n  let lastError: any;\r\n\r\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      return await fn();\r\n    } catch (error: any) {\r\n      lastError = error;\r\n\r\n      // Don't retry on client errors (4xx) except 429\r\n      if (error.code >= 400 && error.code < 500 && error.code !== 429) {\r\n        throw error;\r\n      }\r\n\r\n      // Don't retry on server errors (5xx) after max retries\r\n      if (attempt === maxRetries) {\r\n        logger.error(`Failed ${method} request after ${maxRetries} retries:`, error);\r\n        throw error;\r\n      }\r\n\r\n      // Calculate delay with exponential backoff and jitter\r\n      const delay = baseDelayMs * Math.pow(2, attempt) + Math.random() * 250;\r\n      \r\n      logger.warn(`${method} request failed (attempt ${attempt + 1}/${maxRetries + 1}), retrying in ${Math.round(delay)}ms`);\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, delay));\r\n    }\r\n  }\r\n\r\n  throw lastError;\r\n}\r\n\r\n/**\r\n * Creates a simple logger for REST operations\r\n */\r\nfunction createDefaultLogger(): Logger {\r\n  return {\r\n    debug: (message: string, ...args: any[]) => console.debug(`[REST] ${message}`, ...args),\r\n    info: (message: string, ...args: any[]) => console.info(`[REST] ${message}`, ...args),\r\n    warn: (message: string, ...args: any[]) => console.warn(`[REST] ${message}`, ...args),\r\n    error: (message: string, ...args: any[]) => console.error(`[REST] ${message}`, ...args),\r\n  };\r\n} ","// Permission helpers - TODO: Implement in v0.2\r\nimport type { GuildMember, ChatInputCommandInteraction } from 'discord.js';\r\n\r\n/**\r\n * Check if a member has a specific permission.\r\n * Implementation coming in v0.2.\r\n */\r\nexport function hasPerm(member: GuildMember, perm: any): boolean {\r\n  console.warn('hasPerm not yet implemented - coming in v0.2');\r\n  return false;\r\n}\r\n\r\n/**\r\n * Require guild admin permissions.\r\n * Implementation coming in v0.2.\r\n */\r\nexport async function requireGuildAdmin(interaction: ChatInputCommandInteraction): Promise<boolean> {\r\n  console.warn('requireGuildAdmin not yet implemented - coming in v0.2');\r\n  return false;\r\n}\r\n\r\n/**\r\n * Check if bot can send messages in a channel.\r\n * Implementation coming in v0.2.\r\n */\r\nexport async function canSend(channel: any): Promise<boolean> {\r\n  console.warn('canSend not yet implemented - coming in v0.2');\r\n  return false;\r\n} ","// Sharding helpers - TODO: Implement in v0.3\r\n\r\nexport interface AutoShardOptions {\r\n  recommended?: number;\r\n  totalGuildsHint?: number;\r\n  spawnDelayMs?: number;\r\n  logger?: any;\r\n}\r\n\r\n/**\r\n * Automatic sharding helper.\r\n * Implementation coming in v0.3.\r\n */\r\nexport function autoShard(entry: string, opts?: AutoShardOptions): any {\r\n  console.warn('autoShard not yet implemented - coming in v0.3');\r\n  return null;\r\n}\r\n\r\n/**\r\n * Shard health checking.\r\n * Implementation coming in v0.3.\r\n */\r\nexport async function shardHealth(manager: any): Promise<{ ok: boolean; details: any }> {\r\n  console.warn('shardHealth not yet implemented - coming in v0.3');\r\n  return { ok: false, details: {} };\r\n} ","import type { CacheAdapter } from '../types/index.js';\r\nimport type { Client, Message, GuildMember, TextChannel, Guild } from 'discord.js';\r\n\r\n/**\r\n * Safely get a message without throwing on partials.\r\n * Handles cases where the message might not be cached or accessible.\r\n * \r\n * @param client - Discord.js client\r\n * @param channelId - Channel ID where the message is located\r\n * @param messageId - Message ID to fetch\r\n * @returns Promise resolving to the message or null if not found\r\n * \r\n * @example\r\n * ```typescript\r\n * import { getMessageSafe } from 'easier-djs';\r\n * \r\n * const message = await getMessageSafe(client, '123456789', '987654321');\r\n * if (message) {\r\n *   console.log('Message content:', message.content);\r\n * }\r\n * ```\r\n */\r\nexport async function getMessageSafe(client: Client, channelId: string, messageId: string): Promise<Message | null> {\r\n  try {\r\n    const channel = await client.channels.fetch(channelId);\r\n    if (!channel?.isTextBased()) return null;\r\n    \r\n    const message = await channel.messages.fetch(messageId);\r\n    return message;\r\n  } catch (error) {\r\n    // Message not found or not accessible\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Ensure a guild member is fetched and cached.\r\n * Handles cases where the member might not be cached.\r\n * \r\n * @param client - Discord.js client\r\n * @param guildId - Guild ID where the member is located\r\n * @param userId - User ID to fetch\r\n * @returns Promise resolving to the guild member or null if not found\r\n * \r\n * @example\r\n * ```typescript\r\n * import { ensureGuildMember } from 'easier-djs';\r\n * \r\n * const member = await ensureGuildMember(client, '123456789', '987654321');\r\n * if (member) {\r\n *   console.log('Member nickname:', member.nickname);\r\n * }\r\n * ```\r\n */\r\nexport async function ensureGuildMember(client: Client, guildId: string, userId: string): Promise<GuildMember | null> {\r\n  try {\r\n    const guild = await client.guilds.fetch(guildId);\r\n    const member = await guild.members.fetch(userId);\r\n    return member;\r\n  } catch (error) {\r\n    // Member not found or not accessible\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * In-memory cache adapter with TTL support.\r\n * Simple cache implementation for development and small-scale usage.\r\n * \r\n * @returns CacheAdapter instance\r\n * \r\n * @example\r\n * ```typescript\r\n * import { memoryCache } from 'easier-djs';\r\n * \r\n * const cache = memoryCache();\r\n * await cache.set('user:123', { name: 'John', age: 25 }, 3600); // 1 hour TTL\r\n * const user = await cache.get('user:123');\r\n * ```\r\n */\r\nexport function memoryCache(): CacheAdapter {\r\n  const store = new Map<string, { value: any; expires: number }>();\r\n  \r\n  // Cleanup expired entries every 5 minutes\r\n  setInterval(() => {\r\n    const now = Date.now();\r\n    for (const [key, entry] of store.entries()) {\r\n      if (entry.expires > 0 && entry.expires < now) {\r\n        store.delete(key);\r\n      }\r\n    }\r\n  }, 5 * 60 * 1000);\r\n  \r\n  return {\r\n    async get<T>(key: string): Promise<T | null> {\r\n      const entry = store.get(key);\r\n      if (!entry) return null;\r\n      \r\n      if (entry.expires > 0 && entry.expires < Date.now()) {\r\n        store.delete(key);\r\n        return null;\r\n      }\r\n      \r\n      return entry.value as T;\r\n    },\r\n    \r\n    async set<T>(key: string, value: T, ttlSeconds?: number): Promise<void> {\r\n      const expires = ttlSeconds ? Date.now() + (ttlSeconds * 1000) : 0;\r\n      store.set(key, { value, expires });\r\n    },\r\n    \r\n    async del(key: string): Promise<void> {\r\n      store.delete(key);\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Redis cache adapter (requires Redis connection).\r\n * For production use with Redis server.\r\n * \r\n * @param url - Redis connection URL\r\n * @returns CacheAdapter instance\r\n * \r\n * @example\r\n * ```typescript\r\n * import { redisCache } from 'easier-djs';\r\n * \r\n * const cache = redisCache('redis://localhost:6379');\r\n * await cache.set('session:123', { userId: '456' }, 1800); // 30 min TTL\r\n * ```\r\n */\r\nexport function redisCache(url: string): CacheAdapter {\r\n  // This would require a Redis client like 'redis' or 'ioredis'\r\n  // For now, we'll provide a stub implementation\r\n  console.warn('Redis cache adapter requires Redis client. Install \"redis\" or \"ioredis\" package.');\r\n  \r\n  return {\r\n    async get<T>(): Promise<T | null> {\r\n      return null;\r\n    },\r\n    \r\n    async set(): Promise<void> {\r\n      // No-op for now\r\n    },\r\n    \r\n    async del(): Promise<void> {\r\n      // No-op for now\r\n    }\r\n  };\r\n} ","// i18n helpers - TODO: Implement in v0.3\r\nimport type { Interaction } from 'discord.js';\r\n\r\nexport type Dict = Record<string, Record<string, string>>;\r\n\r\n/**\r\n * Create an i18n function for localized responses.\r\n * Implementation coming in v0.3.\r\n */\r\nexport function createI18n(dict: Dict): (i: Interaction, key: string, vars?: Record<string, string | number>) => string {\r\n  console.warn('createI18n not yet implemented - coming in v0.3');\r\n  return (i: Interaction, key: string, vars?: Record<string, string | number>) => {\r\n    return key; // Return key as fallback\r\n  };\r\n} ","import type { Client } from 'discord.js';\r\nimport type { Logger } from '../types/index.js';\r\n\r\n/**\r\n * Base error class for easier-djs errors\r\n */\r\nexport class EasierError extends Error {\r\n  public code?: string;\r\n  public cause?: unknown;\r\n  \r\n  constructor(message: string, code?: string, cause?: unknown) {\r\n    super(message);\r\n    this.name = 'EasierError';\r\n    if (code !== undefined) {\r\n      this.code = code;\r\n    }\r\n    this.cause = cause;\r\n  }\r\n}\r\n\r\n/**\r\n * Error thrown when command validation fails\r\n */\r\nexport class CommandValidationError extends EasierError {\r\n  constructor(message: string, cause?: unknown) {\r\n    super(message, 'COMMAND_VALIDATION_ERROR', cause);\r\n    this.name = 'CommandValidationError';\r\n  }\r\n}\r\n\r\n/**\r\n * Error thrown when permissions are insufficient\r\n */\r\nexport class PermissionError extends EasierError {\r\n  constructor(message: string, cause?: unknown) {\r\n    super(message, 'PERMISSION_ERROR', cause);\r\n    this.name = 'PermissionError';\r\n  }\r\n}\r\n\r\n/**\r\n * Error thrown when rate limits are exceeded\r\n */\r\nexport class RateLimitError extends EasierError {\r\n  constructor(message: string, retryAfter?: number, cause?: unknown) {\r\n    super(message, 'RATE_LIMIT_ERROR', cause);\r\n    this.name = 'RateLimitError';\r\n    (this as any).retryAfter = retryAfter;\r\n  }\r\n}\r\n\r\n/**\r\n * Installs default error handling middleware for Discord interactions.\r\n * Catches unhandled errors and provides user-friendly error messages.\r\n * \r\n * @param client - Discord.js client to install error handling on\r\n * @param logger - Optional logger for error reporting\r\n * \r\n * @example\r\n * ```typescript\r\n * import { installInteractionErrorHandler } from 'easier-djs';\r\n * \r\n * installInteractionErrorHandler(client, logger);\r\n * ```\r\n * \r\n * @example\r\n * ```javascript\r\n * const { installInteractionErrorHandler } = require('easier-djs');\r\n * installInteractionErrorHandler(client);\r\n * ```\r\n */\r\nexport function installInteractionErrorHandler(client: Client, logger?: Logger): void {\r\n  const log = logger || createDefaultLogger();\r\n  \r\n  client.on('interactionCreate', async (interaction) => {\r\n    if (!interaction.isRepliable()) return;\r\n    \r\n    // Store original methods to wrap them\r\n    const originalReply = interaction.reply.bind(interaction);\r\n    const originalFollowUp = interaction.followUp.bind(interaction);\r\n    const originalEditReply = interaction.editReply.bind(interaction);\r\n    \r\n    // Wrap reply methods with error handling\r\n    interaction.reply = wrapWithErrorHandling(originalReply, interaction, log);\r\n    interaction.followUp = wrapWithErrorHandling(originalFollowUp, interaction, log);\r\n    interaction.editReply = wrapWithErrorHandling(originalEditReply, interaction, log);\r\n  });\r\n  \r\n  // Handle uncaught errors\r\n  client.on('error', (error) => {\r\n    log.error('Discord client error:', error);\r\n  });\r\n  \r\n  client.on('warn', (warning) => {\r\n    log.warn('Discord client warning:', warning);\r\n  });\r\n  \r\n  log.info('✅ Interaction error handler installed');\r\n}\r\n\r\n/**\r\n * Wraps an interaction method with error handling\r\n */\r\nfunction wrapWithErrorHandling(originalMethod: Function, interaction: any, logger: Logger) {\r\n  return async (...args: any[]) => {\r\n    try {\r\n      return await originalMethod(...args);\r\n    } catch (error) {\r\n      await handleInteractionError(error, interaction, logger);\r\n      throw error; // Re-throw for upstream handling\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Handles errors that occur during interaction processing\r\n */\r\nasync function handleInteractionError(error: unknown, interaction: any, logger: Logger): Promise<void> {\r\n  // Redact sensitive information from error logs\r\n  const redactedError = redactSensitiveInfo(error);\r\n  logger.error(`Interaction error for user ${interaction.user.id}:`, redactedError);\r\n  \r\n  let userMessage = 'Something went wrong while processing your request.';\r\n  \r\n  if (error instanceof EasierError) {\r\n    switch (error.code) {\r\n      case 'PERMISSION_ERROR':\r\n        userMessage = 'You don\\'t have permission to use this command.';\r\n        break;\r\n      case 'RATE_LIMIT_ERROR':\r\n        userMessage = 'You\\'re doing that too fast. Please try again later.';\r\n        break;\r\n      case 'COMMAND_VALIDATION_ERROR':\r\n        userMessage = 'Invalid command input. Please check your parameters.';\r\n        break;\r\n    }\r\n  }\r\n  \r\n  try {\r\n    if (interaction.replied || interaction.deferred) {\r\n      await interaction.editReply({ content: userMessage, ephemeral: true });\r\n    } else {\r\n      await interaction.reply({ content: userMessage, ephemeral: true });\r\n    }\r\n  } catch (replyError) {\r\n    logger.error('Failed to send error message to user:', replyError);\r\n  }\r\n}\r\n\r\n/**\r\n * Redacts sensitive information from error objects and stack traces\r\n */\r\nfunction redactSensitiveInfo(error: unknown): unknown {\r\n  if (error instanceof Error) {\r\n    const redactedError = { ...error };\r\n    \r\n    // Redact common sensitive patterns\r\n    if (redactedError.message) {\r\n      redactedError.message = redactedError.message\r\n        .replace(/Bot\\s+[A-Za-z0-9._-]{59}/g, 'Bot [REDACTED]')\r\n        .replace(/Bearer\\s+[A-Za-z0-9._-]+/g, 'Bearer [REDACTED]')\r\n        .replace(/\\d{17,19}/g, '[SNOWFLAKE_REDACTED]'); // Discord snowflakes\r\n    }\r\n    \r\n    if (redactedError.stack) {\r\n      redactedError.stack = redactedError.stack\r\n        .replace(/Bot\\s+[A-Za-z0-9._-]{59}/g, 'Bot [REDACTED]')\r\n        .replace(/Bearer\\s+[A-Za-z0-9._-]+/g, 'Bearer [REDACTED]')\r\n        .replace(/\\d{17,19}/g, '[SNOWFLAKE_REDACTED]');\r\n    }\r\n    \r\n    return redactedError;\r\n  }\r\n  \r\n  return error;\r\n}\r\n\r\n/**\r\n * Creates a logger with redaction capabilities\r\n * \r\n * @param options - Logger configuration\r\n * @returns Logger instance with built-in redaction\r\n * \r\n * @example\r\n * ```typescript\r\n * import { createLogger } from 'easier-djs';\r\n * \r\n * const logger = createLogger({ \r\n *   level: 'info',\r\n *   redact: ['password', 'token', 'secret']\r\n * });\r\n * ```\r\n */\r\nexport function createLogger(options: {\r\n  level?: 'debug' | 'info' | 'warn' | 'error';\r\n  redact?: string[];\r\n} = {}): Logger {\r\n  const { level = 'info', redact = ['token', 'password', 'secret', 'key'] } = options;\r\n  \r\n  const levels = ['debug', 'info', 'warn', 'error'];\r\n  const currentLevelIndex = levels.indexOf(level);\r\n  \r\n  const shouldLog = (messageLevel: string) => {\r\n    return levels.indexOf(messageLevel) >= currentLevelIndex;\r\n  };\r\n  \r\n  const redactMessage = (message: string, ...args: any[]) => {\r\n    let redactedMessage = message;\r\n    const redactedArgs = args.map(arg => {\r\n      if (typeof arg === 'string') {\r\n        let redacted = arg;\r\n        redact.forEach(pattern => {\r\n          const regex = new RegExp(pattern, 'gi');\r\n          redacted = redacted.replace(regex, '[REDACTED]');\r\n        });\r\n        return redacted;\r\n      }\r\n      return arg;\r\n    });\r\n    \r\n    redact.forEach(pattern => {\r\n      const regex = new RegExp(pattern, 'gi');\r\n      redactedMessage = redactedMessage.replace(regex, '[REDACTED]');\r\n    });\r\n    \r\n    return { message: redactedMessage, args: redactedArgs };\r\n  };\r\n  \r\n  return {\r\n    debug: (message: string, ...args: any[]) => {\r\n      if (shouldLog('debug')) {\r\n        const { message: msg, args: redactedArgs } = redactMessage(message, ...args);\r\n        console.debug(`[DEBUG] ${msg}`, ...redactedArgs);\r\n      }\r\n    },\r\n    info: (message: string, ...args: any[]) => {\r\n      if (shouldLog('info')) {\r\n        const { message: msg, args: redactedArgs } = redactMessage(message, ...args);\r\n        console.info(`[INFO] ${msg}`, ...redactedArgs);\r\n      }\r\n    },\r\n    warn: (message: string, ...args: any[]) => {\r\n      if (shouldLog('warn')) {\r\n        const { message: msg, args: redactedArgs } = redactMessage(message, ...args);\r\n        console.warn(`[WARN] ${msg}`, ...redactedArgs);\r\n      }\r\n    },\r\n    error: (message: string, ...args: any[]) => {\r\n      if (shouldLog('error')) {\r\n        const { message: msg, args: redactedArgs } = redactMessage(message, ...args);\r\n        console.error(`[ERROR] ${msg}`, ...redactedArgs);\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a simple default logger\r\n */\r\nfunction createDefaultLogger(): Logger {\r\n  return {\r\n    debug: (message: string, ...args: any[]) => console.debug(`[DEBUG] ${message}`, ...args),\r\n    info: (message: string, ...args: any[]) => console.info(`[INFO] ${message}`, ...args),\r\n    warn: (message: string, ...args: any[]) => console.warn(`[WARN] ${message}`, ...args),\r\n    error: (message: string, ...args: any[]) => console.error(`[ERROR] ${message}`, ...args),\r\n  };\r\n} "]}